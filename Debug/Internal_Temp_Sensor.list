
Internal_Temp_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf0  08007cf0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007cf0  08007cf0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cf0  08007cf0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf0  08007cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001b04  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b78  20001b78  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6d6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037fb  00000000  00000000  0003e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  00041f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013f8  00000000  00000000  000434b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003cf7  00000000  00000000  000448b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a779  00000000  00000000  000485a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8eff  00000000  00000000  00062d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012bc1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d18  00000000  00000000  0012bc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bac 	.word	0x08007bac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007bac 	.word	0x08007bac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fbd6 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f83a 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f934 	bl	80004f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000290:	f000 f892 	bl	80003b8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000294:	f000 f900 	bl	8000498 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&UART_buffer); // Иницилизация кольцевого буффера для отправки данных по UART
 8000298:	480f      	ldr	r0, [pc, #60]	; (80002d8 <main+0x58>)
 800029a:	f004 fa66 	bl	800476a <ring_buffer_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800029e:	f004 fadd 	bl	800485c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002a2:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <main+0x5c>)
 80002a4:	2100      	movs	r1, #0
 80002a6:	480e      	ldr	r0, [pc, #56]	; (80002e0 <main+0x60>)
 80002a8:	f004 fb40 	bl	800492c <osThreadNew>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <main+0x64>)
 80002b0:	6013      	str	r3, [r2, #0]

  /* creation of myUARTsend */
  myUARTsendHandle = osThreadNew(StartUARTsend, NULL, &myUARTsend_attributes);
 80002b2:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <main+0x68>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	480d      	ldr	r0, [pc, #52]	; (80002ec <main+0x6c>)
 80002b8:	f004 fb38 	bl	800492c <osThreadNew>
 80002bc:	4603      	mov	r3, r0
 80002be:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <main+0x70>)
 80002c0:	6013      	str	r3, [r2, #0]

  /* creation of myADC */
  myADCHandle = osThreadNew(StartADC, NULL, &myADC_attributes);
 80002c2:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <main+0x74>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	480c      	ldr	r0, [pc, #48]	; (80002f8 <main+0x78>)
 80002c8:	f004 fb30 	bl	800492c <osThreadNew>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <main+0x7c>)
 80002d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002d2:	f004 faf7 	bl	80048c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <main+0x56>
 80002d8:	20001ad4 	.word	0x20001ad4
 80002dc:	08007c18 	.word	0x08007c18
 80002e0:	080005a9 	.word	0x080005a9
 80002e4:	200019a4 	.word	0x200019a4
 80002e8:	08007c3c 	.word	0x08007c3c
 80002ec:	080005b9 	.word	0x080005b9
 80002f0:	200019a8 	.word	0x200019a8
 80002f4:	08007c60 	.word	0x08007c60
 80002f8:	08000661 	.word	0x08000661
 80002fc:	200019fc 	.word	0x200019fc

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b09e      	sub	sp, #120	; 0x78
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800030a:	2228      	movs	r2, #40	; 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f007 f824 	bl	800735c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	223c      	movs	r2, #60	; 0x3c
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f007 f816 	bl	800735c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000330:	2301      	movs	r3, #1
 8000332:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000338:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	2301      	movs	r3, #1
 8000340:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000342:	2302      	movs	r3, #2
 8000344:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800034c:	2300      	movs	r3, #0
 800034e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000354:	4618      	mov	r0, r3
 8000356:	f001 ffb1 	bl	80022bc <HAL_RCC_OscConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000360:	f000 f9de 	bl	8000720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000368:	2302      	movs	r3, #2
 800036a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000374:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800037e:	2100      	movs	r1, #0
 8000380:	4618      	mov	r0, r3
 8000382:	f002 fea3 	bl	80030cc <HAL_RCC_ClockConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800038c:	f000 f9c8 	bl	8000720 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000390:	2381      	movs	r3, #129	; 0x81
 8000392:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800039c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039e:	463b      	mov	r3, r7
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 f8fb 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003ac:	f000 f9b8 	bl	8000720 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3778      	adds	r7, #120	; 0x78
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003be:	f107 031c 	add.w	r3, r7, #28
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003da:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <MX_ADC1_Init+0xdc>)
 80003dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e2:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <MX_ADC1_Init+0xdc>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <MX_ADC1_Init+0xdc>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <MX_ADC1_Init+0xdc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <MX_ADC1_Init+0xdc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fa:	4b26      	ldr	r3, [pc, #152]	; (8000494 <MX_ADC1_Init+0xdc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000402:	4b24      	ldr	r3, [pc, #144]	; (8000494 <MX_ADC1_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000408:	4b22      	ldr	r3, [pc, #136]	; (8000494 <MX_ADC1_Init+0xdc>)
 800040a:	2201      	movs	r2, #1
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040e:	4b21      	ldr	r3, [pc, #132]	; (8000494 <MX_ADC1_Init+0xdc>)
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <MX_ADC1_Init+0xdc>)
 8000416:	2201      	movs	r2, #1
 8000418:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800041a:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000422:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <MX_ADC1_Init+0xdc>)
 8000424:	2204      	movs	r2, #4
 8000426:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000428:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_ADC1_Init+0xdc>)
 800042a:	2200      	movs	r2, #0
 800042c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800042e:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_ADC1_Init+0xdc>)
 8000430:	2200      	movs	r2, #0
 8000432:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000434:	4817      	ldr	r0, [pc, #92]	; (8000494 <MX_ADC1_Init+0xdc>)
 8000436:	f000 fb33 	bl	8000aa0 <HAL_ADC_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000440:	f000 f96e 	bl	8000720 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	4619      	mov	r1, r3
 800044e:	4811      	ldr	r0, [pc, #68]	; (8000494 <MX_ADC1_Init+0xdc>)
 8000450:	f001 fa4e 	bl	80018f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800045a:	f000 f961 	bl	8000720 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800045e:	2310      	movs	r3, #16
 8000460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000462:	2301      	movs	r3, #1
 8000464:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4806      	ldr	r0, [pc, #24]	; (8000494 <MX_ADC1_Init+0xdc>)
 800047c:	f000 ff4c 	bl	8001318 <HAL_ADC_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000486:	f000 f94b 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	3728      	adds	r7, #40	; 0x28
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200019ac 	.word	0x200019ac

08000498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <MX_USART1_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004dc:	f003 fcd0 	bl	8003e80 <HAL_UART_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004e6:	f000 f91b 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20001a00 	.word	0x20001a00
 80004f4:	40013800 	.word	0x40013800

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a23      	ldr	r2, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_GPIO_Init+0xa8>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <MX_GPIO_Init+0xa8>)
 800052c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xa8>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <MX_GPIO_Init+0xa8>)
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_orange_Pin|LED_green_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <MX_GPIO_Init+0xac>)
 8000576:	f001 fe89 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_orange_Pin LED_green_Pin */
  GPIO_InitStruct.Pin = LED_orange_Pin|LED_green_Pin;
 800057a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_GPIO_Init+0xac>)
 8000594:	f001 fd00 	bl	8001f98 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48001000 	.word	0x48001000

080005a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f004 fa65 	bl	8004a80 <osDelay>
 80005b6:	e7fb      	b.n	80005b0 <StartDefaultTask+0x8>

080005b8 <StartUARTsend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTsend */
void StartUARTsend(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08e      	sub	sp, #56	; 0x38
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTsend */
  /* Infinite loop */
  for(;;)
  {
     if(ring_buffer_check(&UART_buffer)) // Проверка: есть ли новые данные в кольцевом буфере
 80005c0:	4822      	ldr	r0, [pc, #136]	; (800064c <StartUARTsend+0x94>)
 80005c2:	f004 f936 	bl	8004832 <ring_buffer_check>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d03b      	beq.n	8000644 <StartUARTsend+0x8c>
	 {
    	int16_t integer_data, fractional_data;
	  	uint8_t msg[40];

	  	float data_T = ring_buffer_read(&UART_buffer);
 80005cc:	481f      	ldr	r0, [pc, #124]	; (800064c <StartUARTsend+0x94>)
 80005ce:	f004 f906 	bl	80047de <ring_buffer_read>
 80005d2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	  	integer_data = data_T;
 80005d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80005da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005de:	ee17 3a90 	vmov	r3, s15
 80005e2:	867b      	strh	r3, [r7, #50]	; 0x32
	  	fractional_data = ((uint16_t)(abs(data_T*1000)))%1000;
 80005e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80005e8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000650 <StartUARTsend+0x98>
 80005ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005f4:	ee17 3a90 	vmov	r3, s15
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bfb8      	it	lt
 80005fc:	425b      	neglt	r3, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <StartUARTsend+0x9c>)
 8000602:	fba2 1203 	umull	r1, r2, r2, r3
 8000606:	0992      	lsrs	r2, r2, #6
 8000608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800060c:	fb01 f202 	mul.w	r2, r1, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	b29b      	uxth	r3, r3
 8000614:	863b      	strh	r3, [r7, #48]	; 0x30
	  	sprintf(msg, "board temperature = %i.%u\xB0\n", integer_data, fractional_data);
 8000616:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800061a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800061e:	f107 0008 	add.w	r0, r7, #8
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <StartUARTsend+0xa0>)
 8000624:	f006 fea2 	bl	800736c <siprintf>
	  	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fdcf 	bl	80001d0 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	f107 0108 	add.w	r1, r7, #8
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <StartUARTsend+0xa4>)
 8000640:	f003 fc6c 	bl	8003f1c <HAL_UART_Transmit>
	 }
	 osDelay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f004 fa1b 	bl	8004a80 <osDelay>
     if(ring_buffer_check(&UART_buffer)) // Проверка: есть ли новые данные в кольцевом буфере
 800064a:	e7b9      	b.n	80005c0 <StartUARTsend+0x8>
 800064c:	20001ad4 	.word	0x20001ad4
 8000650:	447a0000 	.word	0x447a0000
 8000654:	10624dd3 	.word	0x10624dd3
 8000658:	08007be4 	.word	0x08007be4
 800065c:	20001a00 	.word	0x20001a00

08000660 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  for(;;)
  {
	  float temp_float = 0;
 8000668:	f04f 0300 	mov.w	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	  int16_t temp_raw_data=0;
 800066e:	2300      	movs	r3, #0
 8000670:	817b      	strh	r3, [r7, #10]

	  HAL_ADC_Start(&hadc1); // Запуск АЦП
 8000672:	481c      	ldr	r0, [pc, #112]	; (80006e4 <StartADC+0x84>)
 8000674:	f000 fbf4 	bl	8000e60 <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK); // Ожидание завершения преобразования.
 8000678:	2164      	movs	r1, #100	; 0x64
 800067a:	481a      	ldr	r0, [pc, #104]	; (80006e4 <StartADC+0x84>)
 800067c:	f000 fd3c 	bl	80010f8 <HAL_ADC_PollForConversion>
	  {
	     temp_raw_data = HAL_ADC_GetValue(&hadc1); // Считывание сырых данных с температурного датчика
 8000680:	4818      	ldr	r0, [pc, #96]	; (80006e4 <StartADC+0x84>)
 8000682:	f000 fe3b 	bl	80012fc <HAL_ADC_GetValue>
 8000686:	4603      	mov	r3, r0
 8000688:	817b      	strh	r3, [r7, #10]

	     /* Temperature (in °C) = {(V25 – VTS) / Avg_Slope} + 25 */
	     temp_float = (float)temp_raw_data/4096*V_REF;
 800068a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000696:	eddf 6a14 	vldr	s13, [pc, #80]	; 80006e8 <StartADC+0x88>
 800069a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800069e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80006ec <StartADC+0x8c>
 80006a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006a6:	edc7 7a03 	vstr	s15, [r7, #12]
		 temp_float = (T_25 - (temp_float))/AVG_SLOPE + 25;
 80006aa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80006f0 <StartADC+0x90>
 80006ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80006b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006b6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80006f4 <StartADC+0x94>
 80006ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006be:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80006c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006c6:	edc7 7a03 	vstr	s15, [r7, #12]

		 ring_buffer_write(temp_float, &UART_buffer); // Запись данных в кольцевой буффер
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <StartADC+0x98>)
 80006cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80006d0:	f004 f860 	bl	8004794 <ring_buffer_write>
	  }
	  HAL_ADC_Stop(&hadc1); // Остановка АЦП
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <StartADC+0x84>)
 80006d6:	f000 fcd9 	bl	800108c <HAL_ADC_Stop>
      osDelay(30);
 80006da:	201e      	movs	r0, #30
 80006dc:	f004 f9d0 	bl	8004a80 <osDelay>
  {
 80006e0:	e7c2      	b.n	8000668 <StartADC+0x8>
 80006e2:	bf00      	nop
 80006e4:	200019ac 	.word	0x200019ac
 80006e8:	45800000 	.word	0x45800000
 80006ec:	40533333 	.word	0x40533333
 80006f0:	3fb70a3d 	.word	0x3fb70a3d
 80006f4:	4089999a 	.word	0x4089999a
 80006f8:	20001ad4 	.word	0x20001ad4

080006fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d101      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800070e:	f000 f9a7 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40000400 	.word	0x40000400

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	210f      	movs	r1, #15
 8000766:	f06f 0001 	mvn.w	r0, #1
 800076a:	f001 fbeb 	bl	8001f44 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2105      	movs	r1, #5
 8000772:	2005      	movs	r0, #5
 8000774:	f001 fbe6 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000778:	2005      	movs	r0, #5
 800077a:	f001 fbff 	bl	8001f7c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800079c:	d10b      	bne.n	80007b6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_ADC_MspInit+0x38>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_ADC_MspInit+0x38>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_ADC_MspInit+0x38>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_UART_MspInit+0x7c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d127      	bne.n	800083a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <HAL_UART_MspInit+0x80>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <HAL_UART_MspInit+0x80>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_UART_MspInit+0x80>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_UART_MspInit+0x80>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_UART_MspInit+0x80>)
 8000808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_UART_MspInit+0x80>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800081a:	2330      	movs	r3, #48	; 0x30
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800082a:	2307      	movs	r3, #7
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_UART_MspInit+0x84>)
 8000836:	f001 fbaf 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40013800 	.word	0x40013800
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800

08000850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	201d      	movs	r0, #29
 8000866:	f001 fb6d 	bl	8001f44 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800086a:	201d      	movs	r0, #29
 800086c:	f001 fb86 	bl	8001f7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <HAL_InitTick+0xa0>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <HAL_InitTick+0xa0>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <HAL_InitTick+0xa0>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000888:	f107 0210 	add.w	r2, r7, #16
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fe50 	bl	8003538 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000898:	f002 fe0a 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 800089c:	4603      	mov	r3, r0
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <HAL_InitTick+0xa4>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_InitTick+0xa8>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_InitTick+0xac>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_InitTick+0xa8>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_InitTick+0xa8>)
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_InitTick+0xa8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_InitTick+0xa8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_InitTick+0xa8>)
 80008d2:	f003 f813 	bl	80038fc <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_InitTick+0xa8>)
 80008de:	f003 f86f 	bl	80039c0 <HAL_TIM_Base_Start_IT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	20001a84 	.word	0x20001a84
 80008fc:	40000400 	.word	0x40000400

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM3_IRQHandler+0x10>)
 8000942:	f003 f8a7 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20001a84 	.word	0x20001a84

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f006 fcb4 	bl	80072ec <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000a000 	.word	0x2000a000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000090 	.word	0x20000090
 80009b8:	20001b78 	.word	0x20001b78

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0a:	f7ff ffd7 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f006 fc73 	bl	80072f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a12:	f7ff fc35 	bl	8000280 <main>

08000a16 <LoopForever>:

LoopForever:
    b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a24:	08007cf8 	.word	0x08007cf8
  ldr r2, =_sbss
 8000a28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a2c:	20001b78 	.word	0x20001b78

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f001 fa72 	bl	8001f2e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f7ff ff00 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe6c 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20001ad0 	.word	0x20001ad0

08000a88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20001ad0 	.word	0x20001ad0

08000aa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09a      	sub	sp, #104	; 0x68
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e1c9      	b.n	8000e54 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d176      	bne.n	8000bc0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d152      	bne.n	8000b80 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fe49 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d13b      	bne.n	8000b80 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f001 f847 	bl	8001b9c <ADC_Disable>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d12f      	bne.n	8000b80 <HAL_ADC_Init+0xe0>
 8000b20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d12b      	bne.n	8000b80 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b30:	f023 0302 	bic.w	r3, r3, #2
 8000b34:	f043 0202 	orr.w	r2, r3, #2
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b4a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b5c:	4b86      	ldr	r3, [pc, #536]	; (8000d78 <HAL_ADC_Init+0x2d8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a86      	ldr	r2, [pc, #536]	; (8000d7c <HAL_ADC_Init+0x2dc>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9a      	lsrs	r2, r3, #18
 8000b68:	4613      	mov	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b72:	e002      	b.n	8000b7a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f9      	bne.n	8000b74 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b9c:	d110      	bne.n	8000bc0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f023 0312 	bic.w	r3, r3, #18
 8000ba6:	f043 0210 	orr.w	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f043 0201 	orr.w	r2, r3, #1
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f040 8136 	bne.w	8000e3a <HAL_ADC_Init+0x39a>
 8000bce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8131 	bne.w	8000e3a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8129 	bne.w	8000e3a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000bf0:	f043 0202 	orr.w	r2, r3, #2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c00:	d004      	beq.n	8000c0c <HAL_ADC_Init+0x16c>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a5e      	ldr	r2, [pc, #376]	; (8000d80 <HAL_ADC_Init+0x2e0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d101      	bne.n	8000c10 <HAL_ADC_Init+0x170>
 8000c0c:	4b5d      	ldr	r3, [pc, #372]	; (8000d84 <HAL_ADC_Init+0x2e4>)
 8000c0e:	e000      	b.n	8000c12 <HAL_ADC_Init+0x172>
 8000c10:	4b5d      	ldr	r3, [pc, #372]	; (8000d88 <HAL_ADC_Init+0x2e8>)
 8000c12:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c1c:	d102      	bne.n	8000c24 <HAL_ADC_Init+0x184>
 8000c1e:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <HAL_ADC_Init+0x2e0>)
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	e01a      	b.n	8000c5a <HAL_ADC_Init+0x1ba>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a55      	ldr	r2, [pc, #340]	; (8000d80 <HAL_ADC_Init+0x2e0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d103      	bne.n	8000c36 <HAL_ADC_Init+0x196>
 8000c2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e011      	b.n	8000c5a <HAL_ADC_Init+0x1ba>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a54      	ldr	r2, [pc, #336]	; (8000d8c <HAL_ADC_Init+0x2ec>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d102      	bne.n	8000c46 <HAL_ADC_Init+0x1a6>
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <HAL_ADC_Init+0x2f0>)
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e009      	b.n	8000c5a <HAL_ADC_Init+0x1ba>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a51      	ldr	r2, [pc, #324]	; (8000d90 <HAL_ADC_Init+0x2f0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d102      	bne.n	8000c56 <HAL_ADC_Init+0x1b6>
 8000c50:	4b4e      	ldr	r3, [pc, #312]	; (8000d8c <HAL_ADC_Init+0x2ec>)
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e001      	b.n	8000c5a <HAL_ADC_Init+0x1ba>
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d108      	bne.n	8000c7a <HAL_ADC_Init+0x1da>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <HAL_ADC_Init+0x1da>
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <HAL_ADC_Init+0x1dc>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d11c      	bne.n	8000cba <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c80:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d010      	beq.n	8000ca8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d107      	bne.n	8000ca2 <HAL_ADC_Init+0x202>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Init+0x202>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <HAL_ADC_Init+0x204>
 8000ca2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d108      	bne.n	8000cba <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cb8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7e5b      	ldrb	r3, [r3, #25]
 8000cbe:	035b      	lsls	r3, r3, #13
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cc4:	2a01      	cmp	r2, #1
 8000cc6:	d002      	beq.n	8000cce <HAL_ADC_Init+0x22e>
 8000cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ccc:	e000      	b.n	8000cd0 <HAL_ADC_Init+0x230>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d11b      	bne.n	8000d26 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7e5b      	ldrb	r3, [r3, #25]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d109      	bne.n	8000d0a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	045a      	lsls	r2, r3, #17
 8000cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d00:	4313      	orrs	r3, r2
 8000d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d06:	663b      	str	r3, [r7, #96]	; 0x60
 8000d08:	e00d      	b.n	8000d26 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d12:	f043 0220 	orr.w	r2, r3, #32
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f043 0201 	orr.w	r2, r3, #1
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d03a      	beq.n	8000da4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <HAL_ADC_Init+0x2ec>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d004      	beq.n	8000d42 <HAL_ADC_Init+0x2a2>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_ADC_Init+0x2f0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d128      	bne.n	8000d94 <HAL_ADC_Init+0x2f4>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000d4a:	d012      	beq.n	8000d72 <HAL_ADC_Init+0x2d2>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d54:	d00a      	beq.n	8000d6c <HAL_ADC_Init+0x2cc>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000d5e:	d002      	beq.n	8000d66 <HAL_ADC_Init+0x2c6>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	e018      	b.n	8000d98 <HAL_ADC_Init+0x2f8>
 8000d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6a:	e015      	b.n	8000d98 <HAL_ADC_Init+0x2f8>
 8000d6c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000d70:	e012      	b.n	8000d98 <HAL_ADC_Init+0x2f8>
 8000d72:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d76:	e00f      	b.n	8000d98 <HAL_ADC_Init+0x2f8>
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	50000100 	.word	0x50000100
 8000d84:	50000300 	.word	0x50000300
 8000d88:	50000700 	.word	0x50000700
 8000d8c:	50000400 	.word	0x50000400
 8000d90:	50000500 	.word	0x50000500
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000da0:	4313      	orrs	r3, r2
 8000da2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d114      	bne.n	8000ddc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dc0:	f023 0302 	bic.w	r3, r3, #2
 8000dc4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7e1b      	ldrb	r3, [r3, #24]
 8000dca:	039a      	lsls	r2, r3, #14
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_ADC_Init+0x3bc>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000dec:	430b      	orrs	r3, r1
 8000dee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d10c      	bne.n	8000e12 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f023 010f 	bic.w	r1, r3, #15
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e10:	e007      	b.n	8000e22 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 020f 	bic.w	r2, r2, #15
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f023 0303 	bic.w	r3, r3, #3
 8000e30:	f043 0201 	orr.w	r2, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
 8000e38:	e00a      	b.n	8000e50 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f023 0312 	bic.w	r3, r3, #18
 8000e42:	f043 0210 	orr.w	r2, r3, #16
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3768      	adds	r7, #104	; 0x68
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	fff0c007 	.word	0xfff0c007

08000e60 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 80f9 	bne.w	800106e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Start+0x2a>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e0f4      	b.n	8001074 <HAL_ADC_Start+0x214>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 fe1e 	bl	8001ad4 <ADC_Enable>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 80e0 	bne.w	8001064 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ec0:	d004      	beq.n	8000ecc <HAL_ADC_Start+0x6c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a6d      	ldr	r2, [pc, #436]	; (800107c <HAL_ADC_Start+0x21c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d106      	bne.n	8000eda <HAL_ADC_Start+0x7a>
 8000ecc:	4b6c      	ldr	r3, [pc, #432]	; (8001080 <HAL_ADC_Start+0x220>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d010      	beq.n	8000efa <HAL_ADC_Start+0x9a>
 8000ed8:	e005      	b.n	8000ee6 <HAL_ADC_Start+0x86>
 8000eda:	4b6a      	ldr	r3, [pc, #424]	; (8001084 <HAL_ADC_Start+0x224>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d009      	beq.n	8000efa <HAL_ADC_Start+0x9a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eee:	d004      	beq.n	8000efa <HAL_ADC_Start+0x9a>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a64      	ldr	r2, [pc, #400]	; (8001088 <HAL_ADC_Start+0x228>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d115      	bne.n	8000f26 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d036      	beq.n	8000f82 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f24:	e02d      	b.n	8000f82 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3a:	d004      	beq.n	8000f46 <HAL_ADC_Start+0xe6>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4e      	ldr	r2, [pc, #312]	; (800107c <HAL_ADC_Start+0x21c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10a      	bne.n	8000f5c <HAL_ADC_Start+0xfc>
 8000f46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bf14      	ite	ne
 8000f54:	2301      	movne	r3, #1
 8000f56:	2300      	moveq	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	e008      	b.n	8000f6e <HAL_ADC_Start+0x10e>
 8000f5c:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <HAL_ADC_Start+0x228>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf14      	ite	ne
 8000f68:	2301      	movne	r3, #1
 8000f6a:	2300      	moveq	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f8e:	d106      	bne.n	8000f9e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f023 0206 	bic.w	r2, r3, #6
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f9c:	e002      	b.n	8000fa4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	221c      	movs	r2, #28
 8000fb2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fbc:	d004      	beq.n	8000fc8 <HAL_ADC_Start+0x168>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	; (800107c <HAL_ADC_Start+0x21c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d106      	bne.n	8000fd6 <HAL_ADC_Start+0x176>
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_ADC_Start+0x220>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d03e      	beq.n	8001052 <HAL_ADC_Start+0x1f2>
 8000fd4:	e005      	b.n	8000fe2 <HAL_ADC_Start+0x182>
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_ADC_Start+0x224>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d037      	beq.n	8001052 <HAL_ADC_Start+0x1f2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fea:	d004      	beq.n	8000ff6 <HAL_ADC_Start+0x196>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <HAL_ADC_Start+0x21c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d106      	bne.n	8001004 <HAL_ADC_Start+0x1a4>
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_ADC_Start+0x220>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d027      	beq.n	8001052 <HAL_ADC_Start+0x1f2>
 8001002:	e005      	b.n	8001010 <HAL_ADC_Start+0x1b0>
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_ADC_Start+0x224>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	2b05      	cmp	r3, #5
 800100e:	d020      	beq.n	8001052 <HAL_ADC_Start+0x1f2>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001018:	d004      	beq.n	8001024 <HAL_ADC_Start+0x1c4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_ADC_Start+0x21c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <HAL_ADC_Start+0x1d2>
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_ADC_Start+0x220>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	2b09      	cmp	r3, #9
 800102e:	d010      	beq.n	8001052 <HAL_ADC_Start+0x1f2>
 8001030:	e005      	b.n	800103e <HAL_ADC_Start+0x1de>
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_ADC_Start+0x224>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2b09      	cmp	r3, #9
 800103c:	d009      	beq.n	8001052 <HAL_ADC_Start+0x1f2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001046:	d004      	beq.n	8001052 <HAL_ADC_Start+0x1f2>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_ADC_Start+0x228>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10f      	bne.n	8001072 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 0204 	orr.w	r2, r2, #4
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	e006      	b.n	8001072 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800106c:	e001      	b.n	8001072 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	50000100 	.word	0x50000100
 8001080:	50000300 	.word	0x50000300
 8001084:	50000700 	.word	0x50000700
 8001088:	50000400 	.word	0x50000400

0800108c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Stop+0x1a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e023      	b.n	80010ee <HAL_ADC_Stop+0x62>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80010ae:	216c      	movs	r1, #108	; 0x6c
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fdd9 	bl	8001c68 <ADC_ConversionStop>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d111      	bne.n	80010e4 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fd6b 	bl	8001b9c <ADC_Disable>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	f043 0201 	orr.w	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	2b08      	cmp	r3, #8
 800110c:	d102      	bne.n	8001114 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800110e:	2308      	movs	r3, #8
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e03a      	b.n	800118a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800111c:	d004      	beq.n	8001128 <HAL_ADC_PollForConversion+0x30>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a72      	ldr	r2, [pc, #456]	; (80012ec <HAL_ADC_PollForConversion+0x1f4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_ADC_PollForConversion+0x34>
 8001128:	4b71      	ldr	r3, [pc, #452]	; (80012f0 <HAL_ADC_PollForConversion+0x1f8>)
 800112a:	e000      	b.n	800112e <HAL_ADC_PollForConversion+0x36>
 800112c:	4b71      	ldr	r3, [pc, #452]	; (80012f4 <HAL_ADC_PollForConversion+0x1fc>)
 800112e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	2b00      	cmp	r3, #0
 800113a:	d112      	bne.n	8001162 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b01      	cmp	r3, #1
 8001148:	d11d      	bne.n	8001186 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f043 0220 	orr.w	r2, r3, #32
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0bf      	b.n	80012e2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f043 0220 	orr.w	r2, r3, #32
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0ad      	b.n	80012e2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001186:	230c      	movs	r3, #12
 8001188:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001192:	d004      	beq.n	800119e <HAL_ADC_PollForConversion+0xa6>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a54      	ldr	r2, [pc, #336]	; (80012ec <HAL_ADC_PollForConversion+0x1f4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d106      	bne.n	80011ac <HAL_ADC_PollForConversion+0xb4>
 800119e:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <HAL_ADC_PollForConversion+0x1f8>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d010      	beq.n	80011cc <HAL_ADC_PollForConversion+0xd4>
 80011aa:	e005      	b.n	80011b8 <HAL_ADC_PollForConversion+0xc0>
 80011ac:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <HAL_ADC_PollForConversion+0x1fc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_ADC_PollForConversion+0xd4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c0:	d004      	beq.n	80011cc <HAL_ADC_PollForConversion+0xd4>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_ADC_PollForConversion+0x200>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d104      	bne.n	80011d6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	e00f      	b.n	80011f6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011de:	d004      	beq.n	80011ea <HAL_ADC_PollForConversion+0xf2>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a41      	ldr	r2, [pc, #260]	; (80012ec <HAL_ADC_PollForConversion+0x1f4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d102      	bne.n	80011f0 <HAL_ADC_PollForConversion+0xf8>
 80011ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011ee:	e000      	b.n	80011f2 <HAL_ADC_PollForConversion+0xfa>
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_ADC_PollForConversion+0x200>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80011f6:	f7ff fc47 	bl	8000a88 <HAL_GetTick>
 80011fa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011fc:	e021      	b.n	8001242 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d01d      	beq.n	8001242 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_ADC_PollForConversion+0x124>
 800120c:	f7ff fc3c 	bl	8000a88 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d212      	bcs.n	8001242 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10b      	bne.n	8001242 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f043 0204 	orr.w	r2, r3, #4
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e04f      	b.n	80012e2 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0d6      	beq.n	80011fe <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001266:	2b00      	cmp	r3, #0
 8001268:	d131      	bne.n	80012ce <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001270:	2b00      	cmp	r3, #0
 8001272:	d12c      	bne.n	80012ce <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b08      	cmp	r3, #8
 8001280:	d125      	bne.n	80012ce <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d112      	bne.n	80012b6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d112      	bne.n	80012ce <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
 80012b4:	e00b      	b.n	80012ce <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f043 0220 	orr.w	r2, r3, #32
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	50000100 	.word	0x50000100
 80012f0:	50000300 	.word	0x50000300
 80012f4:	50000700 	.word	0x50000700
 80012f8:	50000400 	.word	0x50000400

080012fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001318:	b480      	push	{r7}
 800131a:	b09b      	sub	sp, #108	; 0x6c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_ADC_ConfigChannel+0x22>
 8001336:	2302      	movs	r3, #2
 8001338:	e2cb      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x5ba>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	f040 82af 	bne.w	80018b0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d81c      	bhi.n	8001394 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	461a      	mov	r2, r3
 800136e:	231f      	movs	r3, #31
 8001370:	4093      	lsls	r3, r2
 8001372:	43db      	mvns	r3, r3
 8001374:	4019      	ands	r1, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
 8001392:	e063      	b.n	800145c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d81e      	bhi.n	80013da <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	3b1e      	subs	r3, #30
 80013b0:	221f      	movs	r2, #31
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4019      	ands	r1, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	3b1e      	subs	r3, #30
 80013cc:	fa00 f203 	lsl.w	r2, r0, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
 80013d8:	e040      	b.n	800145c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b0e      	cmp	r3, #14
 80013e0:	d81e      	bhi.n	8001420 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	3b3c      	subs	r3, #60	; 0x3c
 80013f6:	221f      	movs	r2, #31
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4019      	ands	r1, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	3b3c      	subs	r3, #60	; 0x3c
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
 800141e:	e01d      	b.n	800145c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	3b5a      	subs	r3, #90	; 0x5a
 8001434:	221f      	movs	r2, #31
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	4019      	ands	r1, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	3b5a      	subs	r3, #90	; 0x5a
 8001450:	fa00 f203 	lsl.w	r2, r0, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 80e5 	bne.w	8001636 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b09      	cmp	r3, #9
 8001472:	d91c      	bls.n	80014ae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6999      	ldr	r1, [r3, #24]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	3b1e      	subs	r3, #30
 8001486:	2207      	movs	r2, #7
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	4019      	ands	r1, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6898      	ldr	r0, [r3, #8]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	3b1e      	subs	r3, #30
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	e019      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6959      	ldr	r1, [r3, #20]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	2207      	movs	r2, #7
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4019      	ands	r1, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6898      	ldr	r0, [r3, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	fa00 f203 	lsl.w	r2, r0, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	3b01      	subs	r3, #1
 8001500:	2b03      	cmp	r3, #3
 8001502:	d84f      	bhi.n	80015a4 <HAL_ADC_ConfigChannel+0x28c>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <HAL_ADC_ConfigChannel+0x1f4>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	0800151d 	.word	0x0800151d
 8001510:	0800153f 	.word	0x0800153f
 8001514:	08001561 	.word	0x08001561
 8001518:	08001583 	.word	0x08001583
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001522:	4b9f      	ldr	r3, [pc, #636]	; (80017a0 <HAL_ADC_ConfigChannel+0x488>)
 8001524:	4013      	ands	r3, r2
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	0691      	lsls	r1, r2, #26
 800152c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800152e:	430a      	orrs	r2, r1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800153a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800153c:	e07e      	b.n	800163c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001544:	4b96      	ldr	r3, [pc, #600]	; (80017a0 <HAL_ADC_ConfigChannel+0x488>)
 8001546:	4013      	ands	r3, r2
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	0691      	lsls	r1, r2, #26
 800154e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001550:	430a      	orrs	r2, r1
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800155c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800155e:	e06d      	b.n	800163c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001566:	4b8e      	ldr	r3, [pc, #568]	; (80017a0 <HAL_ADC_ConfigChannel+0x488>)
 8001568:	4013      	ands	r3, r2
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	0691      	lsls	r1, r2, #26
 8001570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001572:	430a      	orrs	r2, r1
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800157e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001580:	e05c      	b.n	800163c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001588:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_ADC_ConfigChannel+0x488>)
 800158a:	4013      	ands	r3, r2
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	0691      	lsls	r1, r2, #26
 8001592:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001594:	430a      	orrs	r2, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015a0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015a2:	e04b      	b.n	800163c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	069b      	lsls	r3, r3, #26
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015c6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	069b      	lsls	r3, r3, #26
 80015d8:	429a      	cmp	r2, r3
 80015da:	d107      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ea:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	069b      	lsls	r3, r3, #26
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d107      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800160e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	069b      	lsls	r3, r3, #26
 8001620:	429a      	cmp	r2, r3
 8001622:	d10a      	bne.n	800163a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001632:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001634:	e001      	b.n	800163a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001636:	bf00      	nop
 8001638:	e000      	b.n	800163c <HAL_ADC_ConfigChannel+0x324>
      break;
 800163a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_ADC_ConfigChannel+0x344>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_ADC_ConfigChannel+0x344>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_ADC_ConfigChannel+0x346>
 800165c:	2300      	movs	r3, #0
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 8131 	bne.w	80018c6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d00f      	beq.n	800168c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800168a:	e049      	b.n	8001720 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	d91c      	bls.n	80016e8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6999      	ldr	r1, [r3, #24]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	3b1b      	subs	r3, #27
 80016c0:	2207      	movs	r2, #7
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4019      	ands	r1, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6898      	ldr	r0, [r3, #8]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	3b1b      	subs	r3, #27
 80016da:	fa00 f203 	lsl.w	r2, r0, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	619a      	str	r2, [r3, #24]
 80016e6:	e01b      	b.n	8001720 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6959      	ldr	r1, [r3, #20]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	2207      	movs	r2, #7
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	4019      	ands	r1, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	fa00 f203 	lsl.w	r2, r0, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001728:	d004      	beq.n	8001734 <HAL_ADC_ConfigChannel+0x41c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_ADC_ConfigChannel+0x48c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x420>
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_ADC_ConfigChannel+0x490>)
 8001736:	e000      	b.n	800173a <HAL_ADC_ConfigChannel+0x422>
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_ADC_ConfigChannel+0x494>)
 800173a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b10      	cmp	r3, #16
 8001742:	d105      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001754:	2b11      	cmp	r3, #17
 8001756:	d105      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001768:	2b12      	cmp	r3, #18
 800176a:	f040 80ac 	bne.w	80018c6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800176e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 80a5 	bne.w	80018c6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001784:	d102      	bne.n	800178c <HAL_ADC_ConfigChannel+0x474>
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_ADC_ConfigChannel+0x48c>)
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e023      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x4bc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_ADC_ConfigChannel+0x48c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10c      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x498>
 8001796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e01a      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x4bc>
 800179e:	bf00      	nop
 80017a0:	83fff000 	.word	0x83fff000
 80017a4:	50000100 	.word	0x50000100
 80017a8:	50000300 	.word	0x50000300
 80017ac:	50000700 	.word	0x50000700
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_ADC_ConfigChannel+0x5c8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d102      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x4a8>
 80017ba:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_ADC_ConfigChannel+0x5cc>)
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e009      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x4bc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_ADC_ConfigChannel+0x5cc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d102      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x4b8>
 80017ca:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <HAL_ADC_ConfigChannel+0x5c8>)
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e001      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x4bc>
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d108      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x4dc>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x4dc>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x4de>
 80017f4:	2300      	movs	r3, #0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d150      	bne.n	800189c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_ADC_ConfigChannel+0x504>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_ConfigChannel+0x504>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_ADC_ConfigChannel+0x506>
 800181c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800181e:	2b00      	cmp	r3, #0
 8001820:	d13c      	bne.n	800189c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d11d      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x54e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001832:	d118      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a29      	ldr	r2, [pc, #164]	; (80018ec <HAL_ADC_ConfigChannel+0x5d4>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9a      	lsrs	r2, r3, #18
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001856:	e002      	b.n	800185e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3b01      	subs	r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f9      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001864:	e02e      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b11      	cmp	r3, #17
 800186c:	d10b      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x56e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001876:	d106      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001882:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001884:	e01e      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b12      	cmp	r3, #18
 800188c:	d11a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800188e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001898:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800189a:	e013      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f043 0220 	orr.w	r2, r3, #32
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018ae:	e00a      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f043 0220 	orr.w	r2, r3, #32
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018c2:	e000      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018c4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	376c      	adds	r7, #108	; 0x6c
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	50000400 	.word	0x50000400
 80018e4:	50000500 	.word	0x50000500
 80018e8:	20000000 	.word	0x20000000
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b099      	sub	sp, #100	; 0x64
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001908:	d102      	bne.n	8001910 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800190a:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	e01a      	b.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d103      	bne.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800191a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	e011      	b.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d102      	bne.n	8001932 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800192c:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	e009      	b.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a64      	ldr	r2, [pc, #400]	; (8001ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d102      	bne.n	8001942 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800193c:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	e001      	b.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b0      	b.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800195a:	2302      	movs	r3, #2
 800195c:	e0a9      	b.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 808d 	bne.w	8001a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 8086 	bne.w	8001a90 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800198c:	d004      	beq.n	8001998 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001998:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800199a:	e000      	b.n	800199e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800199c:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800199e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d040      	beq.n	8001a2a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ba:	035b      	lsls	r3, r3, #13
 80019bc:	430b      	orrs	r3, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80019e4:	2300      	movs	r3, #0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d15c      	bne.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a06:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d14b      	bne.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a14:	f023 030f 	bic.w	r3, r3, #15
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	6892      	ldr	r2, [r2, #8]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	431a      	orrs	r2, r3
 8001a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a26:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a28:	e03c      	b.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a34:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d123      	bne.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001a78:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d112      	bne.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a86:	f023 030f 	bic.w	r3, r3, #15
 8001a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a8c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a8e:	e009      	b.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aa4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3764      	adds	r7, #100	; 0x64
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	50000100 	.word	0x50000100
 8001ac4:	50000400 	.word	0x50000400
 8001ac8:	50000500 	.word	0x50000500
 8001acc:	50000300 	.word	0x50000300
 8001ad0:	50000700 	.word	0x50000700

08001ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d108      	bne.n	8001b00 <ADC_Enable+0x2c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <ADC_Enable+0x2c>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <ADC_Enable+0x2e>
 8001b00:	2300      	movs	r3, #0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d143      	bne.n	8001b8e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <ADC_Enable+0xc4>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f043 0210 	orr.w	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e02f      	b.n	8001b90 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b40:	f7fe ffa2 	bl	8000a88 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b46:	e01b      	b.n	8001b80 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b48:	f7fe ff9e 	bl	8000a88 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d914      	bls.n	8001b80 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d00d      	beq.n	8001b80 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f043 0210 	orr.w	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e007      	b.n	8001b90 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d1dc      	bne.n	8001b48 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	8000003f 	.word	0x8000003f

08001b9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <ADC_Disable+0x2c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <ADC_Disable+0x2c>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <ADC_Disable+0x2e>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d047      	beq.n	8001c5e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030d 	and.w	r3, r3, #13
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10f      	bne.n	8001bfc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0202 	orr.w	r2, r2, #2
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bf4:	f7fe ff48 	bl	8000a88 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bfa:	e029      	b.n	8001c50 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e023      	b.n	8001c60 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c18:	f7fe ff36 	bl	8000a88 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d914      	bls.n	8001c50 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10d      	bne.n	8001c50 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e007      	b.n	8001c60 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d0dc      	beq.n	8001c18 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 809b 	beq.w	8001dc4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c9c:	d12a      	bne.n	8001cf4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d126      	bne.n	8001cf4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d122      	bne.n	8001cf4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001cae:	230c      	movs	r3, #12
 8001cb0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001cb2:	e014      	b.n	8001cde <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4a46      	ldr	r2, [pc, #280]	; (8001dd0 <ADC_ConversionStop+0x168>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d90d      	bls.n	8001cd8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0210 	orr.w	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e076      	b.n	8001dc6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	d1e3      	bne.n	8001cb4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b60      	cmp	r3, #96	; 0x60
 8001cf8:	d015      	beq.n	8001d26 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d10e      	bne.n	8001d26 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0210 	orr.w	r2, r2, #16
 8001d24:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d015      	beq.n	8001d58 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d10e      	bne.n	8001d58 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b60      	cmp	r3, #96	; 0x60
 8001d5c:	d005      	beq.n	8001d6a <ADC_ConversionStop+0x102>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b6c      	cmp	r3, #108	; 0x6c
 8001d62:	d105      	bne.n	8001d70 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d64:	230c      	movs	r3, #12
 8001d66:	617b      	str	r3, [r7, #20]
        break;
 8001d68:	e005      	b.n	8001d76 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	617b      	str	r3, [r7, #20]
        break;
 8001d6e:	e002      	b.n	8001d76 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d70:	2304      	movs	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]
        break;
 8001d74:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d76:	f7fe fe87 	bl	8000a88 <HAL_GetTick>
 8001d7a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d7c:	e01b      	b.n	8001db6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d7e:	f7fe fe83 	bl	8000a88 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b0b      	cmp	r3, #11
 8001d8a:	d914      	bls.n	8001db6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00d      	beq.n	8001db6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f043 0210 	orr.w	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e007      	b.n	8001dc6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1dc      	bne.n	8001d7e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	000993ff 	.word	0x000993ff

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff4c 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f56:	f7ff ff61 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	f7ff ffb1 	bl	8001ec8 <NVIC_EncodePriority>
 8001f66:	4602      	mov	r2, r0
 8001f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff80 	bl	8001e74 <__NVIC_SetPriority>
}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff54 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	e154      	b.n	8002252 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8146 	beq.w	800224c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d005      	beq.n	8001fd8 <HAL_GPIO_Init+0x40>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d130      	bne.n	800203a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200e:	2201      	movs	r2, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 0201 	and.w	r2, r3, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b03      	cmp	r3, #3
 8002044:	d017      	beq.n	8002076 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d123      	bne.n	80020ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	6939      	ldr	r1, [r7, #16]
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0203 	and.w	r2, r3, #3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80a0 	beq.w	800224c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210c:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_GPIO_Init+0x2d8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_GPIO_Init+0x2d8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_GPIO_Init+0x2d8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002124:	4a53      	ldr	r2, [pc, #332]	; (8002274 <HAL_GPIO_Init+0x2dc>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800214e:	d019      	beq.n	8002184 <HAL_GPIO_Init+0x1ec>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_GPIO_Init+0x2e0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d013      	beq.n	8002180 <HAL_GPIO_Init+0x1e8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a48      	ldr	r2, [pc, #288]	; (800227c <HAL_GPIO_Init+0x2e4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00d      	beq.n	800217c <HAL_GPIO_Init+0x1e4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_GPIO_Init+0x2e8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <HAL_GPIO_Init+0x1e0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a46      	ldr	r2, [pc, #280]	; (8002284 <HAL_GPIO_Init+0x2ec>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_GPIO_Init+0x1dc>
 8002170:	2304      	movs	r3, #4
 8002172:	e008      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002174:	2305      	movs	r3, #5
 8002176:	e006      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002178:	2303      	movs	r3, #3
 800217a:	e004      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 800217c:	2302      	movs	r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002184:	2300      	movs	r3, #0
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	f002 0203 	and.w	r2, r2, #3
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	4093      	lsls	r3, r2
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002196:	4937      	ldr	r1, [pc, #220]	; (8002274 <HAL_GPIO_Init+0x2dc>)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	4b38      	ldr	r3, [pc, #224]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021c8:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021f2:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800221c:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_GPIO_Init+0x2f0>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3301      	adds	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f aea3 	bne.w	8001fa8 <HAL_GPIO_Init+0x10>
  }
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40021000 	.word	0x40021000
 8002274:	40010000 	.word	0x40010000
 8002278:	48000400 	.word	0x48000400
 800227c:	48000800 	.word	0x48000800
 8002280:	48000c00 	.word	0x48000c00
 8002284:	48001000 	.word	0x48001000
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f000 bef4 	b.w	80030be <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 816a 	beq.w	80025ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022e6:	4bb3      	ldr	r3, [pc, #716]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d00c      	beq.n	800230c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f2:	4bb0      	ldr	r3, [pc, #704]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d159      	bne.n	80023b2 <HAL_RCC_OscConfig+0xf6>
 80022fe:	4bad      	ldr	r3, [pc, #692]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230a:	d152      	bne.n	80023b2 <HAL_RCC_OscConfig+0xf6>
 800230c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002310:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002320:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <HAL_RCC_OscConfig+0x82>
 8002338:	4b9e      	ldr	r3, [pc, #632]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0xae>
 800233e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002342:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002356:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800235a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002366:	4b93      	ldr	r3, [pc, #588]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800236e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002372:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002376:	fa92 f2a2 	rbit	r2, r2
 800237a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800237e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0220 	orr.w	r2, r2, #32
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 810c 	beq.w	80025b8 <HAL_RCC_OscConfig+0x2fc>
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 8106 	bne.w	80025b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f000 be86 	b.w	80030be <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x110>
 80023be:	4b7d      	ldr	r3, [pc, #500]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7c      	ldr	r2, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e030      	b.n	800242e <HAL_RCC_OscConfig+0x172>
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x134>
 80023d6:	4b77      	ldr	r3, [pc, #476]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a76      	ldr	r2, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a73      	ldr	r2, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80023e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e01e      	b.n	800242e <HAL_RCC_OscConfig+0x172>
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x15a>
 80023fc:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 8002402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x172>
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800241c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 8002428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800242e:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f023 020f 	bic.w	r2, r3, #15
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	495d      	ldr	r1, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800243e:	4313      	orrs	r3, r2
 8002440:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d059      	beq.n	8002500 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe fb1c 	bl	8000a88 <HAL_GetTick>
 8002450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002456:	f7fe fb17 	bl	8000a88 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d902      	bls.n	800246c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	f000 be29 	b.w	80030be <HAL_RCC_OscConfig+0xe02>
 800246c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002470:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002480:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x1e2>
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x20e>
 800249e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024d6:	fa92 f2a2 	rbit	r2, r2
 80024da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024e2:	fab2 f282 	clz	r2, r2
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f042 0220 	orr.w	r2, r2, #32
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f002 021f 	and.w	r2, r2, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f202 	lsl.w	r2, r1, r2
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ab      	beq.n	8002456 <HAL_RCC_OscConfig+0x19a>
 80024fe:	e05c      	b.n	80025ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fac2 	bl	8000a88 <HAL_GetTick>
 8002504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250a:	f7fe fabd 	bl	8000a88 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d902      	bls.n	8002520 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	f000 bdcf 	b.w	80030be <HAL_RCC_OscConfig+0xe02>
 8002520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002524:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002534:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0x296>
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x2c2>
 8002552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002556:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800256e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCC_OscConfig+0x2f8>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002582:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002586:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800258a:	fa92 f2a2 	rbit	r2, r2
 800258e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002592:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ab      	bne.n	800250a <HAL_RCC_OscConfig+0x24e>
 80025b2:	e002      	b.n	80025ba <HAL_RCC_OscConfig+0x2fe>
 80025b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 816f 	beq.w	80028a8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025ca:	4bd0      	ldr	r3, [pc, #832]	; (800290c <HAL_RCC_OscConfig+0x650>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025d6:	4bcd      	ldr	r3, [pc, #820]	; (800290c <HAL_RCC_OscConfig+0x650>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d16c      	bne.n	80026bc <HAL_RCC_OscConfig+0x400>
 80025e2:	4bca      	ldr	r3, [pc, #808]	; (800290c <HAL_RCC_OscConfig+0x650>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d166      	bne.n	80026bc <HAL_RCC_OscConfig+0x400>
 80025ee:	2302      	movs	r3, #2
 80025f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002600:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_RCC_OscConfig+0x362>
 8002618:	4bbc      	ldr	r3, [pc, #752]	; (800290c <HAL_RCC_OscConfig+0x650>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e013      	b.n	8002646 <HAL_RCC_OscConfig+0x38a>
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002630:	2302      	movs	r3, #2
 8002632:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002636:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002642:	4bb2      	ldr	r3, [pc, #712]	; (800290c <HAL_RCC_OscConfig+0x650>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	2202      	movs	r2, #2
 8002648:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800264c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002650:	fa92 f2a2 	rbit	r2, r2
 8002654:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002658:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f002 021f 	and.w	r2, r2, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_RCC_OscConfig+0x3cc>
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d002      	beq.n	8002688 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f000 bd1b 	b.w	80030be <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4ba0      	ldr	r3, [pc, #640]	; (800290c <HAL_RCC_OscConfig+0x650>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	21f8      	movs	r1, #248	; 0xf8
 8002698:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026a0:	fa91 f1a1 	rbit	r1, r1
 80026a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026ac:	fab1 f181 	clz	r1, r1
 80026b0:	b2c9      	uxtb	r1, r1
 80026b2:	408b      	lsls	r3, r1
 80026b4:	4995      	ldr	r1, [pc, #596]	; (800290c <HAL_RCC_OscConfig+0x650>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	e0f5      	b.n	80028a8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8085 	beq.w	80027d2 <HAL_RCC_OscConfig+0x516>
 80026c8:	2301      	movs	r3, #1
 80026ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe f9c8 	bl	8000a88 <HAL_GetTick>
 80026f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe f9c3 	bl	8000a88 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d902      	bls.n	8002714 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	f000 bcd5 	b.w	80030be <HAL_RCC_OscConfig+0xe02>
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002726:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0x488>
 800273e:	4b73      	ldr	r3, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x650>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0x4b0>
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800275c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002768:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x650>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2202      	movs	r2, #2
 800276e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002772:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800277e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002782:	fab2 f282 	clz	r2, r2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f002 021f 	and.w	r2, r2, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0af      	beq.n	80026fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b5b      	ldr	r3, [pc, #364]	; (800290c <HAL_RCC_OscConfig+0x650>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	21f8      	movs	r1, #248	; 0xf8
 80027ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027b6:	fa91 f1a1 	rbit	r1, r1
 80027ba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80027be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80027c2:	fab1 f181 	clz	r1, r1
 80027c6:	b2c9      	uxtb	r1, r1
 80027c8:	408b      	lsls	r3, r1
 80027ca:	4950      	ldr	r1, [pc, #320]	; (800290c <HAL_RCC_OscConfig+0x650>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e06a      	b.n	80028a8 <HAL_RCC_OscConfig+0x5ec>
 80027d2:	2301      	movs	r3, #1
 80027d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	461a      	mov	r2, r3
 80027fa:	2300      	movs	r3, #0
 80027fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe f943 	bl	8000a88 <HAL_GetTick>
 8002802:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002808:	f7fe f93e 	bl	8000a88 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	f000 bc50 	b.w	80030be <HAL_RCC_OscConfig+0xe02>
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <HAL_RCC_OscConfig+0x592>
 8002848:	4b30      	ldr	r3, [pc, #192]	; (800290c <HAL_RCC_OscConfig+0x650>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	e013      	b.n	8002876 <HAL_RCC_OscConfig+0x5ba>
 800284e:	2302      	movs	r3, #2
 8002850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002866:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <HAL_RCC_OscConfig+0x650>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2202      	movs	r2, #2
 8002878:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800287c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002880:	fa92 f2a2 	rbit	r2, r2
 8002884:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002888:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f042 0220 	orr.w	r2, r2, #32
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f002 021f 	and.w	r2, r2, #31
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1af      	bne.n	8002808 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80da 	beq.w	8002a6c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d069      	beq.n	8002996 <HAL_RCC_OscConfig+0x6da>
 80028c2:	2301      	movs	r3, #1
 80028c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x654>)
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	2301      	movs	r3, #1
 80028ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ec:	f7fe f8cc 	bl	8000a88 <HAL_GetTick>
 80028f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f4:	e00e      	b.n	8002914 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7fe f8c7 	bl	8000a88 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d906      	bls.n	8002914 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e3d9      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	10908120 	.word	0x10908120
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002926:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002954:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	4ba5      	ldr	r3, [pc, #660]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800295e:	2102      	movs	r1, #2
 8002960:	6019      	str	r1, [r3, #0]
 8002962:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f1a3 	rbit	r1, r3
 800296c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002970:	6019      	str	r1, [r3, #0]
  return result;
 8002972:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0b0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x63a>
 8002994:	e06a      	b.n	8002a6c <HAL_RCC_OscConfig+0x7b0>
 8002996:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029ac:	601a      	str	r2, [r3, #0]
  return result;
 80029ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b8c      	ldr	r3, [pc, #560]	; (8002bf0 <HAL_RCC_OscConfig+0x934>)
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe f85e 	bl	8000a88 <HAL_GetTick>
 80029cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	e009      	b.n	80029e6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe f859 	bl	8000a88 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e36b      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
 80029e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029ea:	2202      	movs	r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a02:	2202      	movs	r2, #2
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2e:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a36:	2102      	movs	r1, #2
 8002a38:	6019      	str	r1, [r3, #0]
 8002a3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f1a3 	rbit	r1, r3
 8002a44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a48:	6019      	str	r1, [r3, #0]
  return result;
 8002a4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1b2      	bne.n	80029d2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8158 	beq.w	8002d2c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a82:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d112      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	61d3      	str	r3, [r2, #28]
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002aa2:	f107 0308 	add.w	r3, r7, #8
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b4f      	ldr	r3, [pc, #316]	; (8002bf4 <HAL_RCC_OscConfig+0x938>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11a      	bne.n	8002af6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac0:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <HAL_RCC_OscConfig+0x938>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a4b      	ldr	r2, [pc, #300]	; (8002bf4 <HAL_RCC_OscConfig+0x938>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7fd ffdc 	bl	8000a88 <HAL_GetTick>
 8002ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e009      	b.n	8002aea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fd ffd7 	bl	8000a88 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e2e9      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <HAL_RCC_OscConfig+0x938>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ef      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x852>
 8002b00:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4a39      	ldr	r2, [pc, #228]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6213      	str	r3, [r2, #32]
 8002b0c:	e02f      	b.n	8002b6e <HAL_RCC_OscConfig+0x8b2>
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x876>
 8002b18:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a33      	ldr	r2, [pc, #204]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a30      	ldr	r2, [pc, #192]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e01d      	b.n	8002b6e <HAL_RCC_OscConfig+0x8b2>
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x89a>
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x8b2>
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a24      	ldr	r2, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a21      	ldr	r2, [pc, #132]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d06b      	beq.n	8002c50 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fd ff86 	bl	8000a88 <HAL_GetTick>
 8002b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fd ff81 	bl	8000a88 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e291      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
 8002b9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fa93 f2a3 	rbit	r2, r3
 8002bac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bc8:	601a      	str	r2, [r3, #0]
  return result;
 8002bca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x93c>
 8002be4:	4b01      	ldr	r3, [pc, #4]	; (8002bec <HAL_RCC_OscConfig+0x930>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	e014      	b.n	8002c14 <HAL_RCC_OscConfig+0x958>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	10908120 	.word	0x10908120
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	4bbb      	ldr	r3, [pc, #748]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c18:	2102      	movs	r1, #2
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	fa92 f1a2 	rbit	r1, r2
 8002c26:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c2a:	6011      	str	r1, [r2, #0]
  return result;
 8002c2c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d099      	beq.n	8002b82 <HAL_RCC_OscConfig+0x8c6>
 8002c4e:	e063      	b.n	8002d18 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fd ff1a 	bl	8000a88 <HAL_GetTick>
 8002c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fd ff15 	bl	8000a88 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e225      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
 8002c72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c76:	2202      	movs	r2, #2
 8002c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c8e:	2202      	movs	r2, #2
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ca0:	601a      	str	r2, [r3, #0]
  return result;
 8002ca2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ca6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d102      	bne.n	8002cc2 <HAL_RCC_OscConfig+0xa06>
 8002cbc:	4b90      	ldr	r3, [pc, #576]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	e00d      	b.n	8002cde <HAL_RCC_OscConfig+0xa22>
 8002cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	4b89      	ldr	r3, [pc, #548]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	6011      	str	r1, [r2, #0]
 8002ce6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	fa92 f1a2 	rbit	r1, r2
 8002cf0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cf4:	6011      	str	r1, [r2, #0]
  return result;
 8002cf6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	fab2 f282 	clz	r2, r2
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	f002 021f 	and.w	r2, r2, #31
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1a0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	4b77      	ldr	r3, [pc, #476]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4a76      	ldr	r2, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 81c2 	beq.w	80030bc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d38:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	f000 819c 	beq.w	800307e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	f040 8114 	bne.w	8002f7a <HAL_RCC_OscConfig+0xcbe>
 8002d52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d6a:	601a      	str	r2, [r3, #0]
  return result;
 8002d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fd fe7e 	bl	8000a88 <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d90:	e009      	b.n	8002da6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fd fe79 	bl	8000a88 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e18b      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
 8002da6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0xb24>
 8002dda:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e01b      	b.n	8002e18 <HAL_RCC_OscConfig+0xb5c>
 8002de0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	fa93 f2a3 	rbit	r2, r3
 8002df4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e20:	6011      	str	r1, [r2, #0]
 8002e22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	fa92 f1a2 	rbit	r1, r2
 8002e2c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e30:	6011      	str	r1, [r2, #0]
  return result;
 8002e32:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d19e      	bne.n	8002d92 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e54:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	4925      	ldr	r1, [pc, #148]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
 8002e70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e88:	601a      	str	r2, [r3, #0]
  return result;
 8002e8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e8e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fd fdef 	bl	8000a88 <HAL_GetTick>
 8002eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eae:	e009      	b.n	8002ec4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fd fdea 	bl	8000a88 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0fc      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
 8002ec4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002edc:	601a      	str	r2, [r3, #0]
  return result;
 8002ede:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ee2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCC_OscConfig+0xc48>
 8002ef8:	4b01      	ldr	r3, [pc, #4]	; (8002f00 <HAL_RCC_OscConfig+0xc44>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	e01e      	b.n	8002f3c <HAL_RCC_OscConfig+0xc80>
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fa93 f2a3 	rbit	r2, r3
 8002f32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_OscConfig+0xe0c>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fa92 f1a2 	rbit	r1, r2
 8002f50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f54:	6011      	str	r1, [r2, #0]
  return result;
 8002f56:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0220 	orr.w	r2, r2, #32
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d09b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xbf4>
 8002f78:	e0a0      	b.n	80030bc <HAL_RCC_OscConfig+0xe00>
 8002f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f92:	601a      	str	r2, [r3, #0]
  return result;
 8002f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	461a      	mov	r2, r3
 8002fac:	2300      	movs	r3, #0
 8002fae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fd fd6a 	bl	8000a88 <HAL_GetTick>
 8002fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb8:	e009      	b.n	8002fce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fd fd65 	bl	8000a88 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e077      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
 8002fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe6:	601a      	str	r2, [r3, #0]
  return result;
 8002fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d102      	bne.n	8003008 <HAL_RCC_OscConfig+0xd4c>
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_RCC_OscConfig+0xe0c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	e01b      	b.n	8003040 <HAL_RCC_OscConfig+0xd84>
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f107 0320 	add.w	r3, r7, #32
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f107 0318 	add.w	r3, r7, #24
 8003026:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f107 0318 	add.w	r3, r7, #24
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCC_OscConfig+0xe0c>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f107 0210 	add.w	r2, r7, #16
 8003044:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003048:	6011      	str	r1, [r2, #0]
 800304a:	f107 0210 	add.w	r2, r7, #16
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	fa92 f1a2 	rbit	r1, r2
 8003054:	f107 020c 	add.w	r2, r7, #12
 8003058:	6011      	str	r1, [r2, #0]
  return result;
 800305a:	f107 020c 	add.w	r2, r7, #12
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	fab2 f282 	clz	r2, r2
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f042 0220 	orr.w	r2, r2, #32
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f002 021f 	and.w	r2, r2, #31
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d19e      	bne.n	8002fba <HAL_RCC_OscConfig+0xcfe>
 800307c:	e01e      	b.n	80030bc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e018      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_RCC_OscConfig+0xe0c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003094:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d108      	bne.n	80030b8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000

080030cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b09e      	sub	sp, #120	; 0x78
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e162      	b.n	80033aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b90      	ldr	r3, [pc, #576]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d910      	bls.n	8003114 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b8d      	ldr	r3, [pc, #564]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	498b      	ldr	r1, [pc, #556]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b89      	ldr	r3, [pc, #548]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e14a      	b.n	80033aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	497f      	ldr	r1, [pc, #508]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80dc 	beq.w	80032f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d13c      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xf6>
 8003148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d102      	bne.n	8003172 <HAL_RCC_ClockConfig+0xa6>
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	e00f      	b.n	8003192 <HAL_RCC_ClockConfig+0xc6>
 8003172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003176:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	667b      	str	r3, [r7, #100]	; 0x64
 8003180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003184:	663b      	str	r3, [r7, #96]	; 0x60
 8003186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318e:	4b67      	ldr	r3, [pc, #412]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003196:	65ba      	str	r2, [r7, #88]	; 0x58
 8003198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800319a:	fa92 f2a2 	rbit	r2, r2
 800319e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d17b      	bne.n	80032b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0f3      	b.n	80033aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d13c      	bne.n	8003244 <HAL_RCC_ClockConfig+0x178>
 80031ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d102      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x128>
 80031ee:	4b4f      	ldr	r3, [pc, #316]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	e00f      	b.n	8003214 <HAL_RCC_ClockConfig+0x148>
 80031f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	647b      	str	r3, [r7, #68]	; 0x44
 8003202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003206:	643b      	str	r3, [r7, #64]	; 0x40
 8003208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003218:	63ba      	str	r2, [r7, #56]	; 0x38
 800321a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321c:	fa92 f2a2 	rbit	r2, r2
 8003220:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003224:	fab2 f282 	clz	r2, r2
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	f042 0220 	orr.w	r2, r2, #32
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	f002 021f 	and.w	r2, r2, #31
 8003234:	2101      	movs	r1, #1
 8003236:	fa01 f202 	lsl.w	r2, r1, r2
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d13a      	bne.n	80032b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0b2      	b.n	80033aa <HAL_RCC_ClockConfig+0x2de>
 8003244:	2302      	movs	r3, #2
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_RCC_ClockConfig+0x1a0>
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e00d      	b.n	8003288 <HAL_RCC_ClockConfig+0x1bc>
 800326c:	2302      	movs	r3, #2
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
 8003278:	2302      	movs	r3, #2
 800327a:	623b      	str	r3, [r7, #32]
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2202      	movs	r2, #2
 800328a:	61ba      	str	r2, [r7, #24]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	fa92 f2a2 	rbit	r2, r2
 8003292:	617a      	str	r2, [r7, #20]
  return result;
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0220 	orr.w	r2, r2, #32
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e079      	b.n	80033aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	491a      	ldr	r1, [pc, #104]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fd fbde 	bl	8000a88 <HAL_GetTick>
 80032cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fd fbda 	bl	8000a88 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e061      	b.n	80033aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_ClockConfig+0x260>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d214      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0207 	bic.w	r2, r3, #7
 800330e:	4906      	ldr	r1, [pc, #24]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_RCC_ClockConfig+0x25c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e040      	b.n	80033aa <HAL_RCC_ClockConfig+0x2de>
 8003328:	40022000 	.word	0x40022000
 800332c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCC_ClockConfig+0x2e8>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	491a      	ldr	r1, [pc, #104]	; (80033b4 <HAL_RCC_ClockConfig+0x2e8>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x2e8>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4912      	ldr	r1, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x2e8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800336e:	f000 f829 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003372:	4601      	mov	r1, r0
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_RCC_ClockConfig+0x2e8>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337c:	22f0      	movs	r2, #240	; 0xf0
 800337e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	fa92 f2a2 	rbit	r2, r2
 8003386:	60fa      	str	r2, [r7, #12]
  return result;
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	fab2 f282 	clz	r2, r2
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	40d3      	lsrs	r3, r2
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x2ec>)
 8003394:	5cd3      	ldrb	r3, [r2, r3]
 8003396:	fa21 f303 	lsr.w	r3, r1, r3
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_RCC_ClockConfig+0x2f0>)
 800339c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800339e:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_RCC_ClockConfig+0x2f4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fa54 	bl	8000850 <HAL_InitTick>
  
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3778      	adds	r7, #120	; 0x78
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08007c84 	.word	0x08007c84
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b08b      	sub	sp, #44	; 0x2c
 80033c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033de:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x30>
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x36>
 80033f2:	e03c      	b.n	800346e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033f6:	623b      	str	r3, [r7, #32]
      break;
 80033f8:	e03c      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003400:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003404:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	fa92 f2a2 	rbit	r2, r2
 800340c:	607a      	str	r2, [r7, #4]
  return result;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	fab2 f282 	clz	r2, r2
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	40d3      	lsrs	r3, r2
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_RCC_GetSysClockFreq+0xc8>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	220f      	movs	r2, #15
 8003428:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	fa92 f2a2 	rbit	r2, r2
 8003430:	60fa      	str	r2, [r7, #12]
  return result;
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	fab2 f282 	clz	r2, r2
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	40d3      	lsrs	r3, r2
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <HAL_RCC_GetSysClockFreq+0xcc>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc4>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	fbb2 f2f3 	udiv	r2, r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
 800345c:	e004      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	623b      	str	r3, [r7, #32]
      break;
 800346c:	e002      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003470:	623b      	str	r3, [r7, #32]
      break;
 8003472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003474:	6a3b      	ldr	r3, [r7, #32]
}
 8003476:	4618      	mov	r0, r3
 8003478:	372c      	adds	r7, #44	; 0x2c
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	007a1200 	.word	0x007a1200
 800348c:	08007c9c 	.word	0x08007c9c
 8003490:	08007cac 	.word	0x08007cac
 8003494:	003d0900 	.word	0x003d0900

08003498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCC_GetHCLKFreq+0x14>)
 800349e:	681b      	ldr	r3, [r3, #0]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000000 	.word	0x20000000

080034b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034b6:	f7ff ffef 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034ba:	4601      	mov	r1, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	603a      	str	r2, [r7, #0]
  return result;
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	40d3      	lsrs	r3, r2
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08007c94 	.word	0x08007c94

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034fa:	f7ff ffcd 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034fe:	4601      	mov	r1, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003508:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800350c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	fa92 f2a2 	rbit	r2, r2
 8003514:	603a      	str	r2, [r7, #0]
  return result;
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	fab2 f282 	clz	r2, r2
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	40d3      	lsrs	r3, r2
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	08007c94 	.word	0x08007c94

08003538 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	220f      	movs	r2, #15
 8003546:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_GetClockConfig+0x5c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <HAL_RCC_GetClockConfig+0x60>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0207 	and.w	r2, r3, #7
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	40022000 	.word	0x40022000

0800359c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b092      	sub	sp, #72	; 0x48
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80d4 	beq.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c0:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10e      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	61d3      	str	r3, [r2, #28]
 80035d8:	4b48      	ldr	r3, [pc, #288]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b45      	ldr	r3, [pc, #276]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d118      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b42      	ldr	r3, [pc, #264]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a41      	ldr	r2, [pc, #260]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fd fa41 	bl	8000a88 <HAL_GetTick>
 8003606:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	e008      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fd fa3d 	bl	8000a88 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b64      	cmp	r3, #100	; 0x64
 8003616:	d901      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e169      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	4b38      	ldr	r3, [pc, #224]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003628:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8084 	beq.w	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003644:	429a      	cmp	r2, r3
 8003646:	d07c      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	461a      	mov	r2, r3
 8003672:	2301      	movs	r3, #1
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800367a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	461a      	mov	r2, r3
 8003696:	2300      	movs	r3, #0
 8003698:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d04b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fd f9ed 	bl	8000a88 <HAL_GetTick>
 80036ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd f9e9 	bl	8000a88 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e113      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80036c8:	2302      	movs	r3, #2
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	61fb      	str	r3, [r7, #28]
  return result;
 80036e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f043 0302 	orr.w	r3, r3, #2
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d108      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036f6:	4b01      	ldr	r3, [pc, #4]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	e00d      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
 8003704:	10908100 	.word	0x10908100
 8003708:	2302      	movs	r3, #2
 800370a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2202      	movs	r2, #2
 800371a:	613a      	str	r2, [r7, #16]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	fa92 f2a2 	rbit	r2, r2
 8003722:	60fa      	str	r2, [r7, #12]
  return result;
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	fab2 f282 	clz	r2, r2
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	f002 021f 	and.w	r2, r2, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f202 	lsl.w	r2, r1, r2
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0b7      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003742:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	496a      	ldr	r1, [pc, #424]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003754:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003766:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003774:	4b60      	ldr	r3, [pc, #384]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f023 0203 	bic.w	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	495d      	ldr	r1, [pc, #372]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4956      	ldr	r1, [pc, #344]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037b0:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	494e      	ldr	r1, [pc, #312]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ce:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f023 0210 	bic.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4947      	ldr	r1, [pc, #284]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037ec:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	493f      	ldr	r1, [pc, #252]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f023 0220 	bic.w	r2, r3, #32
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4938      	ldr	r1, [pc, #224]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003828:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	4930      	ldr	r1, [pc, #192]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003846:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	4929      	ldr	r1, [pc, #164]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4921      	ldr	r1, [pc, #132]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	491a      	ldr	r1, [pc, #104]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	4912      	ldr	r1, [pc, #72]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	490b      	ldr	r1, [pc, #44]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3748      	adds	r7, #72	; 0x48
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e049      	b.n	80039a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f841 	bl	80039aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 f9f2 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e04a      	b.n	8003a6e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <HAL_TIM_Base_Start_IT+0xbc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d013      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x6c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d115      	bne.n	8003a58 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d015      	beq.n	8003a6a <HAL_TIM_Base_Start_IT+0xaa>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d011      	beq.n	8003a6a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	e008      	b.n	8003a6a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40013400 	.word	0x40013400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	00010007 	.word	0x00010007

08003a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0202 	mvn.w	r2, #2
 8003ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f905 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8f7 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f908 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0204 	mvn.w	r2, #4
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8db 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8cd 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f8de 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0208 	mvn.w	r2, #8
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8b1 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8a3 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8b4 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0210 	mvn.w	r2, #16
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f887 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f879 	bl	8003cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f88a 	bl	8003cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0201 	mvn.w	r2, #1
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fc fd72 	bl	80006fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f90a 	bl	8003e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c52:	d10e      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d107      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8fd 	bl	8003e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d10e      	bne.n	8003c9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d107      	bne.n	8003c9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f838 	bl	8003d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d10e      	bne.n	8003cca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d107      	bne.n	8003cca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f06f 0220 	mvn.w	r2, #32
 8003cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8bd 	bl	8003e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a3c      	ldr	r2, [pc, #240]	; (8003e28 <TIM_Base_SetConfig+0x104>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00f      	beq.n	8003d5c <TIM_Base_SetConfig+0x38>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d00b      	beq.n	8003d5c <TIM_Base_SetConfig+0x38>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <TIM_Base_SetConfig+0x108>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <TIM_Base_SetConfig+0x38>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <TIM_Base_SetConfig+0x10c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x38>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a37      	ldr	r2, [pc, #220]	; (8003e34 <TIM_Base_SetConfig+0x110>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	; (8003e28 <TIM_Base_SetConfig+0x104>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01b      	beq.n	8003dae <TIM_Base_SetConfig+0x8a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d017      	beq.n	8003dae <TIM_Base_SetConfig+0x8a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <TIM_Base_SetConfig+0x108>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <TIM_Base_SetConfig+0x8a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a29      	ldr	r2, [pc, #164]	; (8003e30 <TIM_Base_SetConfig+0x10c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00f      	beq.n	8003dae <TIM_Base_SetConfig+0x8a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <TIM_Base_SetConfig+0x110>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00b      	beq.n	8003dae <TIM_Base_SetConfig+0x8a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <TIM_Base_SetConfig+0x8a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d003      	beq.n	8003dae <TIM_Base_SetConfig+0x8a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <TIM_Base_SetConfig+0x104>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00f      	beq.n	8003e0c <TIM_Base_SetConfig+0xe8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <TIM_Base_SetConfig+0x110>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00b      	beq.n	8003e0c <TIM_Base_SetConfig+0xe8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d007      	beq.n	8003e0c <TIM_Base_SetConfig+0xe8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_Base_SetConfig+0xe8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d103      	bne.n	8003e14 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	615a      	str	r2, [r3, #20]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40013400 	.word	0x40013400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40014400 	.word	0x40014400
 8003e40:	40014800 	.word	0x40014800

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e040      	b.n	8003f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fc fc90 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	; 0x24
 8003eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8c0 	bl	8004044 <UART_SetConfig>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa88 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fb0f 	bl	8004530 <UART_CheckIdleState>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	f040 8082 	bne.w	800403a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_UART_Transmit+0x26>
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07a      	b.n	800403c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_UART_Transmit+0x38>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e073      	b.n	800403c <HAL_UART_Transmit+0x120>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2221      	movs	r2, #33	; 0x21
 8003f68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6a:	f7fc fd8d 	bl	8000a88 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f88:	d108      	bne.n	8003f9c <HAL_UART_Transmit+0x80>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e003      	b.n	8003fa4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003fac:	e02d      	b.n	800400a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2180      	movs	r1, #128	; 0x80
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fb02 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e039      	b.n	800403c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	61bb      	str	r3, [r7, #24]
 8003fe4:	e008      	b.n	8003ff8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b292      	uxth	r2, r2
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1cb      	bne.n	8003fae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	2140      	movs	r1, #64	; 0x40
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 face 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e005      	b.n	800403c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004072:	f023 030c 	bic.w	r3, r3, #12
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	430b      	orrs	r3, r1
 800407e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4aae      	ldr	r2, [pc, #696]	; (8004378 <UART_SetConfig+0x334>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d120      	bne.n	8004106 <UART_SetConfig+0xc2>
 80040c4:	4bad      	ldr	r3, [pc, #692]	; (800437c <UART_SetConfig+0x338>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d817      	bhi.n	8004100 <UART_SetConfig+0xbc>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <UART_SetConfig+0x94>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040f5 	.word	0x080040f5
 80040e0:	080040fb 	.word	0x080040fb
 80040e4:	080040ef 	.word	0x080040ef
 80040e8:	2301      	movs	r3, #1
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e0b5      	b.n	800425a <UART_SetConfig+0x216>
 80040ee:	2302      	movs	r3, #2
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e0b2      	b.n	800425a <UART_SetConfig+0x216>
 80040f4:	2304      	movs	r3, #4
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e0af      	b.n	800425a <UART_SetConfig+0x216>
 80040fa:	2308      	movs	r3, #8
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e0ac      	b.n	800425a <UART_SetConfig+0x216>
 8004100:	2310      	movs	r3, #16
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e0a9      	b.n	800425a <UART_SetConfig+0x216>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a9d      	ldr	r2, [pc, #628]	; (8004380 <UART_SetConfig+0x33c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d124      	bne.n	800415a <UART_SetConfig+0x116>
 8004110:	4b9a      	ldr	r3, [pc, #616]	; (800437c <UART_SetConfig+0x338>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800411c:	d011      	beq.n	8004142 <UART_SetConfig+0xfe>
 800411e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004122:	d817      	bhi.n	8004154 <UART_SetConfig+0x110>
 8004124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004128:	d011      	beq.n	800414e <UART_SetConfig+0x10a>
 800412a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412e:	d811      	bhi.n	8004154 <UART_SetConfig+0x110>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <UART_SetConfig+0xf8>
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d006      	beq.n	8004148 <UART_SetConfig+0x104>
 800413a:	e00b      	b.n	8004154 <UART_SetConfig+0x110>
 800413c:	2300      	movs	r3, #0
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e08b      	b.n	800425a <UART_SetConfig+0x216>
 8004142:	2302      	movs	r3, #2
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	e088      	b.n	800425a <UART_SetConfig+0x216>
 8004148:	2304      	movs	r3, #4
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e085      	b.n	800425a <UART_SetConfig+0x216>
 800414e:	2308      	movs	r3, #8
 8004150:	77fb      	strb	r3, [r7, #31]
 8004152:	e082      	b.n	800425a <UART_SetConfig+0x216>
 8004154:	2310      	movs	r3, #16
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e07f      	b.n	800425a <UART_SetConfig+0x216>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a89      	ldr	r2, [pc, #548]	; (8004384 <UART_SetConfig+0x340>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d124      	bne.n	80041ae <UART_SetConfig+0x16a>
 8004164:	4b85      	ldr	r3, [pc, #532]	; (800437c <UART_SetConfig+0x338>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800416c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004170:	d011      	beq.n	8004196 <UART_SetConfig+0x152>
 8004172:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004176:	d817      	bhi.n	80041a8 <UART_SetConfig+0x164>
 8004178:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800417c:	d011      	beq.n	80041a2 <UART_SetConfig+0x15e>
 800417e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004182:	d811      	bhi.n	80041a8 <UART_SetConfig+0x164>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <UART_SetConfig+0x14c>
 8004188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800418c:	d006      	beq.n	800419c <UART_SetConfig+0x158>
 800418e:	e00b      	b.n	80041a8 <UART_SetConfig+0x164>
 8004190:	2300      	movs	r3, #0
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e061      	b.n	800425a <UART_SetConfig+0x216>
 8004196:	2302      	movs	r3, #2
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e05e      	b.n	800425a <UART_SetConfig+0x216>
 800419c:	2304      	movs	r3, #4
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e05b      	b.n	800425a <UART_SetConfig+0x216>
 80041a2:	2308      	movs	r3, #8
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e058      	b.n	800425a <UART_SetConfig+0x216>
 80041a8:	2310      	movs	r3, #16
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e055      	b.n	800425a <UART_SetConfig+0x216>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a75      	ldr	r2, [pc, #468]	; (8004388 <UART_SetConfig+0x344>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d124      	bne.n	8004202 <UART_SetConfig+0x1be>
 80041b8:	4b70      	ldr	r3, [pc, #448]	; (800437c <UART_SetConfig+0x338>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041c4:	d011      	beq.n	80041ea <UART_SetConfig+0x1a6>
 80041c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ca:	d817      	bhi.n	80041fc <UART_SetConfig+0x1b8>
 80041cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d0:	d011      	beq.n	80041f6 <UART_SetConfig+0x1b2>
 80041d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d6:	d811      	bhi.n	80041fc <UART_SetConfig+0x1b8>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <UART_SetConfig+0x1a0>
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e0:	d006      	beq.n	80041f0 <UART_SetConfig+0x1ac>
 80041e2:	e00b      	b.n	80041fc <UART_SetConfig+0x1b8>
 80041e4:	2300      	movs	r3, #0
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e037      	b.n	800425a <UART_SetConfig+0x216>
 80041ea:	2302      	movs	r3, #2
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e034      	b.n	800425a <UART_SetConfig+0x216>
 80041f0:	2304      	movs	r3, #4
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e031      	b.n	800425a <UART_SetConfig+0x216>
 80041f6:	2308      	movs	r3, #8
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e02e      	b.n	800425a <UART_SetConfig+0x216>
 80041fc:	2310      	movs	r3, #16
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e02b      	b.n	800425a <UART_SetConfig+0x216>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a61      	ldr	r2, [pc, #388]	; (800438c <UART_SetConfig+0x348>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d124      	bne.n	8004256 <UART_SetConfig+0x212>
 800420c:	4b5b      	ldr	r3, [pc, #364]	; (800437c <UART_SetConfig+0x338>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004214:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004218:	d011      	beq.n	800423e <UART_SetConfig+0x1fa>
 800421a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800421e:	d817      	bhi.n	8004250 <UART_SetConfig+0x20c>
 8004220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004224:	d011      	beq.n	800424a <UART_SetConfig+0x206>
 8004226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800422a:	d811      	bhi.n	8004250 <UART_SetConfig+0x20c>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <UART_SetConfig+0x1f4>
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004234:	d006      	beq.n	8004244 <UART_SetConfig+0x200>
 8004236:	e00b      	b.n	8004250 <UART_SetConfig+0x20c>
 8004238:	2300      	movs	r3, #0
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x216>
 800423e:	2302      	movs	r3, #2
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e00a      	b.n	800425a <UART_SetConfig+0x216>
 8004244:	2304      	movs	r3, #4
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e007      	b.n	800425a <UART_SetConfig+0x216>
 800424a:	2308      	movs	r3, #8
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e004      	b.n	800425a <UART_SetConfig+0x216>
 8004250:	2310      	movs	r3, #16
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e001      	b.n	800425a <UART_SetConfig+0x216>
 8004256:	2310      	movs	r3, #16
 8004258:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004262:	d15c      	bne.n	800431e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004264:	7ffb      	ldrb	r3, [r7, #31]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d827      	bhi.n	80042ba <UART_SetConfig+0x276>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x22c>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004295 	.word	0x08004295
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042ab 	.word	0x080042ab
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042bb 	.word	0x080042bb
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004294:	f7ff f90c 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8004298:	61b8      	str	r0, [r7, #24]
        break;
 800429a:	e013      	b.n	80042c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7ff f92a 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 80042a0:	61b8      	str	r0, [r7, #24]
        break;
 80042a2:	e00f      	b.n	80042c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <UART_SetConfig+0x34c>)
 80042a6:	61bb      	str	r3, [r7, #24]
        break;
 80042a8:	e00c      	b.n	80042c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7ff f88b 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80042ae:	61b8      	str	r0, [r7, #24]
        break;
 80042b0:	e008      	b.n	80042c4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	61bb      	str	r3, [r7, #24]
        break;
 80042b8:	e004      	b.n	80042c4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	77bb      	strb	r3, [r7, #30]
        break;
 80042c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8085 	beq.w	80043d6 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	005a      	lsls	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	441a      	add	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b0f      	cmp	r3, #15
 80042e8:	d916      	bls.n	8004318 <UART_SetConfig+0x2d4>
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d212      	bcs.n	8004318 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f023 030f 	bic.w	r3, r3, #15
 80042fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	b29b      	uxth	r3, r3
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	b29a      	uxth	r2, r3
 8004308:	89fb      	ldrh	r3, [r7, #14]
 800430a:	4313      	orrs	r3, r2
 800430c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	89fa      	ldrh	r2, [r7, #14]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	e05e      	b.n	80043d6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77bb      	strb	r3, [r7, #30]
 800431c:	e05b      	b.n	80043d6 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800431e:	7ffb      	ldrb	r3, [r7, #31]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d837      	bhi.n	8004394 <UART_SetConfig+0x350>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x2e8>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004351 	.word	0x08004351
 8004330:	08004359 	.word	0x08004359
 8004334:	08004361 	.word	0x08004361
 8004338:	08004395 	.word	0x08004395
 800433c:	08004367 	.word	0x08004367
 8004340:	08004395 	.word	0x08004395
 8004344:	08004395 	.word	0x08004395
 8004348:	08004395 	.word	0x08004395
 800434c:	0800436f 	.word	0x0800436f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004350:	f7ff f8ae 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8004354:	61b8      	str	r0, [r7, #24]
        break;
 8004356:	e022      	b.n	800439e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7ff f8cc 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 800435c:	61b8      	str	r0, [r7, #24]
        break;
 800435e:	e01e      	b.n	800439e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <UART_SetConfig+0x34c>)
 8004362:	61bb      	str	r3, [r7, #24]
        break;
 8004364:	e01b      	b.n	800439e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004366:	f7ff f82d 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800436a:	61b8      	str	r0, [r7, #24]
        break;
 800436c:	e017      	b.n	800439e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e013      	b.n	800439e <UART_SetConfig+0x35a>
 8004376:	bf00      	nop
 8004378:	40013800 	.word	0x40013800
 800437c:	40021000 	.word	0x40021000
 8004380:	40004400 	.word	0x40004400
 8004384:	40004800 	.word	0x40004800
 8004388:	40004c00 	.word	0x40004c00
 800438c:	40005000 	.word	0x40005000
 8004390:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	77bb      	strb	r3, [r7, #30]
        break;
 800439c:	bf00      	nop
    }

    if (pclk != 0U)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d018      	beq.n	80043d6 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	085a      	lsrs	r2, r3, #1
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b0f      	cmp	r3, #15
 80043be:	d908      	bls.n	80043d2 <UART_SetConfig+0x38e>
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d204      	bcs.n	80043d2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	e001      	b.n	80043d6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043e2:	7fbb      	ldrb	r3, [r7, #30]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01a      	beq.n	8004502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ea:	d10a      	bne.n	8004502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004540:	f7fc faa2 	bl	8000a88 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10e      	bne.n	8004572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f82d 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e023      	b.n	80045ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d10e      	bne.n	800459e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f817 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e00d      	b.n	80045ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b09c      	sub	sp, #112	; 0x70
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d2:	e0a5      	b.n	8004720 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	f000 80a1 	beq.w	8004720 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fc fa53 	bl	8000a88 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80045ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d13e      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004608:	667b      	str	r3, [r7, #100]	; 0x64
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004614:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e6      	bne.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	663b      	str	r3, [r7, #96]	; 0x60
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004646:	64ba      	str	r2, [r7, #72]	; 0x48
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800464c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e067      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d04f      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468e:	d147      	bne.n	8004720 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004698:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e6      	bne.n	800469a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	613b      	str	r3, [r7, #16]
   return(result);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3308      	adds	r3, #8
 80046ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046ec:	623a      	str	r2, [r7, #32]
 80046ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	69f9      	ldr	r1, [r7, #28]
 80046f2:	6a3a      	ldr	r2, [r7, #32]
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e5      	bne.n	80046cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e010      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	f43f af4a 	beq.w	80045d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3770      	adds	r7, #112	; 0x70
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <buffer_clear>:
#include "ring_buffer.h"

ring_buffer_t UART_buffer;

void buffer_clear(float *b, uint8_t size)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	70fb      	strb	r3, [r7, #3]
	memset(b, '0', size);
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	461a      	mov	r2, r3
 800475a:	2130      	movs	r1, #48	; 0x30
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f002 fdfd 	bl	800735c <memset>
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <ring_buffer_init>:

void ring_buffer_init(ring_buffer_t *rb)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
	buffer_clear(rb->data, BUF_SIZE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2114      	movs	r1, #20
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ffe7 	bl	800474a <buffer_clear>
	rb->head = 0;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	rb->tail = 0;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <ring_buffer_write>:

void ring_buffer_write(float data, ring_buffer_t *rb)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	ed87 0a01 	vstr	s0, [r7, #4]
 800479e:	6038      	str	r0, [r7, #0]
	rb->data[rb->head] = data;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	601a      	str	r2, [r3, #0]
	rb->head = rb->head+1;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b6:	3301      	adds	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	if(rb->head >= BUF_SIZE)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c6:	2b13      	cmp	r3, #19
 80047c8:	d903      	bls.n	80047d2 <ring_buffer_write+0x3e>
	{
		rb->head = 0;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	}
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <ring_buffer_read>:

float ring_buffer_read(ring_buffer_t *rb)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
	float data=0;
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]

	data =  rb->data[rb->tail];
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
	rb->tail = rb->tail+1;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004802:	3301      	adds	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	if(rb->tail >= BUF_SIZE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004812:	2b13      	cmp	r3, #19
 8004814:	d903      	bls.n	800481e <ring_buffer_read+0x40>
	{
		rb->tail = 0;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	}

	return data;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	ee07 3a90 	vmov	s15, r3
}
 8004824:	eeb0 0a67 	vmov.f32	s0, s15
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <ring_buffer_check>:

uint8_t ring_buffer_check(ring_buffer_t *rb)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
	if(rb->tail != rb->head) return (uint8_t)1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004846:	429a      	cmp	r2, r3
 8004848:	d001      	beq.n	800484e <ring_buffer_check+0x1c>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <ring_buffer_check+0x1e>
	else return (uint8_t)0;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004862:	f3ef 8305 	mrs	r3, IPSR
 8004866:	60bb      	str	r3, [r7, #8]
  return(result);
 8004868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486e:	f3ef 8310 	mrs	r3, PRIMASK
 8004872:	607b      	str	r3, [r7, #4]
  return(result);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <osKernelInitialize+0x32>
 800487a:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <osKernelInitialize+0x64>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d109      	bne.n	8004896 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004882:	f3ef 8311 	mrs	r3, BASEPRI
 8004886:	603b      	str	r3, [r7, #0]
  return(result);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800488e:	f06f 0305 	mvn.w	r3, #5
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e00c      	b.n	80048b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <osKernelInitialize+0x64>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <osKernelInitialize+0x64>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e002      	b.n	80048b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295
 80048ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000094 	.word	0x20000094

080048c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ca:	f3ef 8305 	mrs	r3, IPSR
 80048ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	607b      	str	r3, [r7, #4]
  return(result);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <osKernelStart+0x32>
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <osKernelStart+0x64>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d109      	bne.n	80048fe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ea:	f3ef 8311 	mrs	r3, BASEPRI
 80048ee:	603b      	str	r3, [r7, #0]
  return(result);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80048f6:	f06f 0305 	mvn.w	r3, #5
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e00e      	b.n	800491c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <osKernelStart+0x64>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <osKernelStart+0x64>)
 8004908:	2202      	movs	r2, #2
 800490a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800490c:	f001 f880 	bl	8005a10 <vTaskStartScheduler>
      stat = osOK;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e002      	b.n	800491c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004916:	f04f 33ff 	mov.w	r3, #4294967295
 800491a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800491c:	68fb      	ldr	r3, [r7, #12]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000094 	.word	0x20000094

0800492c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b092      	sub	sp, #72	; 0x48
 8004930:	af04      	add	r7, sp, #16
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800493c:	f3ef 8305 	mrs	r3, IPSR
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 8094 	bne.w	8004a72 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494a:	f3ef 8310 	mrs	r3, PRIMASK
 800494e:	623b      	str	r3, [r7, #32]
  return(result);
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 808d 	bne.w	8004a72 <osThreadNew+0x146>
 8004958:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <osThreadNew+0x150>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d106      	bne.n	800496e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004960:	f3ef 8311 	mrs	r3, BASEPRI
 8004964:	61fb      	str	r3, [r7, #28]
  return(result);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8082 	bne.w	8004a72 <osThreadNew+0x146>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d07e      	beq.n	8004a72 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004978:	2318      	movs	r3, #24
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800497c:	2300      	movs	r3, #0
 800497e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004980:	f107 031b 	add.w	r3, r7, #27
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d045      	beq.n	8004a1e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <osThreadNew+0x74>
        name = attr->name;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <osThreadNew+0x9a>
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b38      	cmp	r3, #56	; 0x38
 80049b8:	d805      	bhi.n	80049c6 <osThreadNew+0x9a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <osThreadNew+0x9e>
        return (NULL);
 80049c6:	2300      	movs	r3, #0
 80049c8:	e054      	b.n	8004a74 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <osThreadNew+0xd4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b5b      	cmp	r3, #91	; 0x5b
 80049e8:	d90a      	bls.n	8004a00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <osThreadNew+0xd4>
        mem = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fe:	e010      	b.n	8004a22 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10c      	bne.n	8004a22 <osThreadNew+0xf6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d108      	bne.n	8004a22 <osThreadNew+0xf6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <osThreadNew+0xf6>
          mem = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1c:	e001      	b.n	8004a22 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d110      	bne.n	8004a4a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a30:	9202      	str	r2, [sp, #8]
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fe1a 	bl	8005678 <xTaskCreateStatic>
 8004a44:	4603      	mov	r3, r0
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e013      	b.n	8004a72 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d110      	bne.n	8004a72 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fe64 	bl	8005730 <xTaskCreate>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <osThreadNew+0x146>
          hTask = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3738      	adds	r7, #56	; 0x38
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000094 	.word	0x20000094

08004a80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a88:	f3ef 8305 	mrs	r3, IPSR
 8004a8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10f      	bne.n	8004ab4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a94:	f3ef 8310 	mrs	r3, PRIMASK
 8004a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <osDelay+0x34>
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <osDelay+0x58>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d109      	bne.n	8004abc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <osDelay+0x3c>
    stat = osErrorISR;
 8004ab4:	f06f 0305 	mvn.w	r3, #5
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	e007      	b.n	8004acc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <osDelay+0x4c>
      vTaskDelay(ticks);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 ff6e 	bl	80059a8 <vTaskDelay>
    }
  }

  return (stat);
 8004acc:	697b      	ldr	r3, [r7, #20]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000094 	.word	0x20000094

08004adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8004aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a06      	ldr	r2, [pc, #24]	; (8004b0c <vApplicationGetIdleTaskMemory+0x30>)
 8004af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000098 	.word	0x20000098
 8004b0c:	200000f4 	.word	0x200000f4

08004b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8004b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <vApplicationGetTimerTaskMemory+0x30>)
 8004b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	200002f4 	.word	0x200002f4
 8004b40:	20000350 	.word	0x20000350

08004b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f103 0208 	add.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f103 0208 	add.w	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f103 0208 	add.w	r2, r3, #8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d103      	bne.n	8004c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e00c      	b.n	8004c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e002      	b.n	8004c14 <vListInsert+0x2e>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d2f6      	bcs.n	8004c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6892      	ldr	r2, [r2, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d103      	bne.n	8004c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cd6:	f002 f80d 	bl	8006cf4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	441a      	add	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d06:	3b01      	subs	r3, #1
 8004d08:	68f9      	ldr	r1, [r7, #12]
 8004d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	441a      	add	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	22ff      	movs	r2, #255	; 0xff
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d114      	bne.n	8004d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01a      	beq.n	8004d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3310      	adds	r3, #16
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f8f7 	bl	8005f2c <xTaskRemoveFromEventList>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d012      	beq.n	8004d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <xQueueGenericReset+0xcc>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	e009      	b.n	8004d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3310      	adds	r3, #16
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fef2 	bl	8004b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff feed 	bl	8004b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d6a:	f001 fff3 	bl	8006d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d6e:	2301      	movs	r3, #1
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	; 0x38
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <xQueueGenericCreateStatic+0x52>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <xQueueGenericCreateStatic+0x56>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <xQueueGenericCreateStatic+0x58>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	623b      	str	r3, [r7, #32]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <xQueueGenericCreateStatic+0x7e>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <xQueueGenericCreateStatic+0x82>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <xQueueGenericCreateStatic+0x84>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	61fb      	str	r3, [r7, #28]
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e1a:	2350      	movs	r3, #80	; 0x50
 8004e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b50      	cmp	r3, #80	; 0x50
 8004e22:	d00a      	beq.n	8004e3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61bb      	str	r3, [r7, #24]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f805 	bl	8004e6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3730      	adds	r7, #48	; 0x30
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e002      	b.n	8004e8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e98:	2101      	movs	r1, #1
 8004e9a:	69b8      	ldr	r0, [r7, #24]
 8004e9c:	f7ff ff06 	bl	8004cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08e      	sub	sp, #56	; 0x38
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <xQueueGenericSend+0x32>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <xQueueGenericSend+0x40>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <xQueueGenericSend+0x44>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <xQueueGenericSend+0x46>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xQueueGenericSend+0x60>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d103      	bne.n	8004f1e <xQueueGenericSend+0x6e>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <xQueueGenericSend+0x72>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <xQueueGenericSend+0x74>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xQueueGenericSend+0x8e>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	623b      	str	r3, [r7, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f3e:	f001 f9b9 	bl	80062b4 <xTaskGetSchedulerState>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <xQueueGenericSend+0x9e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <xQueueGenericSend+0xa2>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <xQueueGenericSend+0xa4>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <xQueueGenericSend+0xbe>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61fb      	str	r3, [r7, #28]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f6e:	f001 fec1 	bl	8006cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <xQueueGenericSend+0xd4>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d129      	bne.n	8004fd8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8a:	f000 fa07 	bl	800539c <prvCopyDataToQueue>
 8004f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d010      	beq.n	8004fba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	3324      	adds	r3, #36	; 0x24
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 ffc5 	bl	8005f2c <xTaskRemoveFromEventList>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fa8:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <xQueueGenericSend+0x1f8>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	e00a      	b.n	8004fd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fc0:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <xQueueGenericSend+0x1f8>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fd0:	f001 fec0 	bl	8006d54 <vPortExitCritical>
				return pdPASS;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e063      	b.n	80050a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fde:	f001 feb9 	bl	8006d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e05c      	b.n	80050a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 ffff 	bl	8005ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ffa:	f001 feab 	bl	8006d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ffe:	f000 fd6d 	bl	8005adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005002:	f001 fe77 	bl	8006cf4 <vPortEnterCritical>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800500c:	b25b      	sxtb	r3, r3
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d103      	bne.n	800501c <xQueueGenericSend+0x16c>
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005022:	b25b      	sxtb	r3, r3
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d103      	bne.n	8005032 <xQueueGenericSend+0x182>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005032:	f001 fe8f 	bl	8006d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005036:	1d3a      	adds	r2, r7, #4
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f000 ffee 	bl	8006020 <xTaskCheckForTimeOut>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d124      	bne.n	8005094 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800504a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504c:	f000 fa9e 	bl	800558c <prvIsQueueFull>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	3310      	adds	r3, #16
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff14 	bl	8005e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005066:	f000 fa29 	bl	80054bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800506a:	f000 fd45 	bl	8005af8 <xTaskResumeAll>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f af7c 	bne.w	8004f6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <xQueueGenericSend+0x1f8>)
 8005078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	e772      	b.n	8004f6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800508a:	f000 fa17 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800508e:	f000 fd33 	bl	8005af8 <xTaskResumeAll>
 8005092:	e76c      	b.n	8004f6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005096:	f000 fa11 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800509a:	f000 fd2d 	bl	8005af8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800509e:	2300      	movs	r3, #0
		}
	}
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3738      	adds	r7, #56	; 0x38
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08e      	sub	sp, #56	; 0x38
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <xQueueGenericSendFromISR+0x3c>
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <xQueueGenericSendFromISR+0x40>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <xQueueGenericSendFromISR+0x42>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	623b      	str	r3, [r7, #32]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d103      	bne.n	8005116 <xQueueGenericSendFromISR+0x6a>
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <xQueueGenericSendFromISR+0x6e>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <xQueueGenericSendFromISR+0x70>
 800511a:	2300      	movs	r3, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	61fb      	str	r3, [r7, #28]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005136:	f001 febf 	bl	8006eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800513a:	f3ef 8211 	mrs	r2, BASEPRI
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	61ba      	str	r2, [r7, #24]
 8005150:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005152:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <xQueueGenericSendFromISR+0xbc>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d12c      	bne.n	80051c2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800516e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005178:	f000 f910 	bl	800539c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800517c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d112      	bne.n	80051ac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d016      	beq.n	80051bc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	3324      	adds	r3, #36	; 0x24
 8005192:	4618      	mov	r0, r3
 8005194:	f000 feca 	bl	8005f2c <xTaskRemoveFromEventList>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e007      	b.n	80051bc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051b0:	3301      	adds	r3, #1
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	b25a      	sxtb	r2, r3
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051bc:	2301      	movs	r3, #1
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80051c0:	e001      	b.n	80051c6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	637b      	str	r3, [r7, #52]	; 0x34
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3738      	adds	r7, #56	; 0x38
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08c      	sub	sp, #48	; 0x30
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <xQueueReceive+0x30>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	623b      	str	r3, [r7, #32]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <xQueueReceive+0x3e>
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <xQueueReceive+0x42>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <xQueueReceive+0x44>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueReceive+0x5e>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61fb      	str	r3, [r7, #28]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800523a:	f001 f83b 	bl	80062b4 <xTaskGetSchedulerState>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <xQueueReceive+0x6e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <xQueueReceive+0x72>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueReceive+0x74>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueReceive+0x8e>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	61bb      	str	r3, [r7, #24]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800526a:	f001 fd43 	bl	8006cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01f      	beq.n	80052ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527e:	f000 f8f7 	bl	8005470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	1e5a      	subs	r2, r3, #1
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00f      	beq.n	80052b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	3310      	adds	r3, #16
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fe48 	bl	8005f2c <xTaskRemoveFromEventList>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052a2:	4b3d      	ldr	r3, [pc, #244]	; (8005398 <xQueueReceive+0x1bc>)
 80052a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052b2:	f001 fd4f 	bl	8006d54 <vPortExitCritical>
				return pdPASS;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e069      	b.n	800538e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052c0:	f001 fd48 	bl	8006d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e062      	b.n	800538e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ce:	f107 0310 	add.w	r3, r7, #16
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fe8e 	bl	8005ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052d8:	2301      	movs	r3, #1
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052dc:	f001 fd3a 	bl	8006d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052e0:	f000 fbfc 	bl	8005adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052e4:	f001 fd06 	bl	8006cf4 <vPortEnterCritical>
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d103      	bne.n	80052fe <xQueueReceive+0x122>
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005304:	b25b      	sxtb	r3, r3
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d103      	bne.n	8005314 <xQueueReceive+0x138>
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005314:	f001 fd1e 	bl	8006d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005318:	1d3a      	adds	r2, r7, #4
 800531a:	f107 0310 	add.w	r3, r7, #16
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fe7d 	bl	8006020 <xTaskCheckForTimeOut>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d123      	bne.n	8005374 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800532c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532e:	f000 f917 	bl	8005560 <prvIsQueueEmpty>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d017      	beq.n	8005368 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	3324      	adds	r3, #36	; 0x24
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fda3 	bl	8005e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005348:	f000 f8b8 	bl	80054bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800534c:	f000 fbd4 	bl	8005af8 <xTaskResumeAll>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d189      	bne.n	800526a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <xQueueReceive+0x1bc>)
 8005358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	e780      	b.n	800526a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536a:	f000 f8a7 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800536e:	f000 fbc3 	bl	8005af8 <xTaskResumeAll>
 8005372:	e77a      	b.n	800526a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005376:	f000 f8a1 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800537a:	f000 fbbd 	bl	8005af8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005380:	f000 f8ee 	bl	8005560 <prvIsQueueEmpty>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	f43f af6f 	beq.w	800526a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800538c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800538e:	4618      	mov	r0, r3
 8005390:	3730      	adds	r7, #48	; 0x30
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d14d      	bne.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 ff92 	bl	80062f0 <xTaskPriorityDisinherit>
 80053cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	e043      	b.n	800545e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d119      	bne.n	8005410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6898      	ldr	r0, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	461a      	mov	r2, r3
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	f001 ffaa 	bl	8007340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d32b      	bcc.n	800545e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	e026      	b.n	800545e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68d8      	ldr	r0, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	461a      	mov	r2, r3
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	f001 ff90 	bl	8007340 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	425b      	negs	r3, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d207      	bcs.n	800544c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	425b      	negs	r3, r3
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d105      	bne.n	800545e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3b01      	subs	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	441a      	add	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	d303      	bcc.n	80054a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68d9      	ldr	r1, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	461a      	mov	r2, r3
 80054ae:	6838      	ldr	r0, [r7, #0]
 80054b0:	f001 ff46 	bl	8007340 <memcpy>
	}
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c4:	f001 fc16 	bl	8006cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d0:	e011      	b.n	80054f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d012      	beq.n	8005500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd24 	bl	8005f2c <xTaskRemoveFromEventList>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ea:	f000 fdfb 	bl	80060e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dce9      	bgt.n	80054d2 <prvUnlockQueue+0x16>
 80054fe:	e000      	b.n	8005502 <prvUnlockQueue+0x46>
					break;
 8005500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800550a:	f001 fc23 	bl	8006d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800550e:	f001 fbf1 	bl	8006cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800551a:	e011      	b.n	8005540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3310      	adds	r3, #16
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fcff 	bl	8005f2c <xTaskRemoveFromEventList>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005534:	f000 fdd6 	bl	80060e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005538:	7bbb      	ldrb	r3, [r7, #14]
 800553a:	3b01      	subs	r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dce9      	bgt.n	800551c <prvUnlockQueue+0x60>
 8005548:	e000      	b.n	800554c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800554a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	22ff      	movs	r2, #255	; 0xff
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005554:	f001 fbfe 	bl	8006d54 <vPortExitCritical>
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005568:	f001 fbc4 	bl	8006cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e001      	b.n	800557e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f001 fbe9 	bl	8006d54 <vPortExitCritical>

	return xReturn;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005594:	f001 fbae 	bl	8006cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d102      	bne.n	80055aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e001      	b.n	80055ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ae:	f001 fbd1 	bl	8006d54 <vPortExitCritical>

	return xReturn;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e014      	b.n	80055f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055cc:	4a0f      	ldr	r2, [pc, #60]	; (800560c <vQueueAddToRegistry+0x50>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055d8:	490c      	ldr	r1, [pc, #48]	; (800560c <vQueueAddToRegistry+0x50>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <vQueueAddToRegistry+0x50>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ee:	e006      	b.n	80055fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	d9e7      	bls.n	80055cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20001b28 	.word	0x20001b28

08005610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005620:	f001 fb68 	bl	8006cf4 <vPortEnterCritical>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d103      	bne.n	800563a <vQueueWaitForMessageRestricted+0x2a>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005640:	b25b      	sxtb	r3, r3
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d103      	bne.n	8005650 <vQueueWaitForMessageRestricted+0x40>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005650:	f001 fb80 	bl	8006d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fc35 	bl	8005ed4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff ff26 	bl	80054bc <prvUnlockQueue>
	}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08e      	sub	sp, #56	; 0x38
 800567c:	af04      	add	r7, sp, #16
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xTaskCreateStatic+0x46>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61fb      	str	r3, [r7, #28]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056be:	235c      	movs	r3, #92	; 0x5c
 80056c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b5c      	cmp	r3, #92	; 0x5c
 80056c6:	d00a      	beq.n	80056de <xTaskCreateStatic+0x66>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61bb      	str	r3, [r7, #24]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01e      	beq.n	8005722 <xTaskCreateStatic+0xaa>
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01b      	beq.n	8005722 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056fc:	2300      	movs	r3, #0
 80056fe:	9303      	str	r3, [sp, #12]
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f850 	bl	80057ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800571a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571c:	f000 f8d4 	bl	80058c8 <prvAddNewTaskToReadyList>
 8005720:	e001      	b.n	8005726 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005726:	697b      	ldr	r3, [r7, #20]
	}
 8005728:	4618      	mov	r0, r3
 800572a:	3728      	adds	r7, #40	; 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af04      	add	r7, sp, #16
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fbf7 	bl	8006f38 <pvPortMalloc>
 800574a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00e      	beq.n	8005770 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005752:	205c      	movs	r0, #92	; 0x5c
 8005754:	f001 fbf0 	bl	8006f38 <pvPortMalloc>
 8005758:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
 8005766:	e005      	b.n	8005774 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005768:	6978      	ldr	r0, [r7, #20]
 800576a:	f001 fca9 	bl	80070c0 <vPortFree>
 800576e:	e001      	b.n	8005774 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d017      	beq.n	80057aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	2300      	movs	r3, #0
 8005786:	9303      	str	r3, [sp, #12]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	9302      	str	r3, [sp, #8]
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f80e 	bl	80057ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579e:	69f8      	ldr	r0, [r7, #28]
 80057a0:	f000 f892 	bl	80058c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e002      	b.n	80057b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057b0:	69bb      	ldr	r3, [r7, #24]
	}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b088      	sub	sp, #32
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	461a      	mov	r2, r3
 80057d2:	21a5      	movs	r1, #165	; 0xa5
 80057d4:	f001 fdc2 	bl	800735c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e2:	3b01      	subs	r3, #1
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	617b      	str	r3, [r7, #20]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e012      	b.n	800583e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	7819      	ldrb	r1, [r3, #0]
 8005820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	3334      	adds	r3, #52	; 0x34
 8005828:	460a      	mov	r2, r1
 800582a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	4413      	add	r3, r2
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d006      	beq.n	8005846 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3301      	adds	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	2b0f      	cmp	r3, #15
 8005842:	d9e9      	bls.n	8005818 <prvInitialiseNewTask+0x5e>
 8005844:	e000      	b.n	8005848 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005846:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b37      	cmp	r3, #55	; 0x37
 8005854:	d901      	bls.n	800585a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005856:	2337      	movs	r3, #55	; 0x37
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005864:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2200      	movs	r2, #0
 800586a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	3304      	adds	r3, #4
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff f987 	bl	8004b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	3318      	adds	r3, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff f982 	bl	8004b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005884:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	2200      	movs	r2, #0
 800589a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	69b8      	ldr	r0, [r7, #24]
 80058aa:	f001 f8f5 	bl	8006a98 <pxPortInitialiseStack>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058c0:	bf00      	nop
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058d0:	f001 fa10 	bl	8006cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058d4:	4b2d      	ldr	r3, [pc, #180]	; (800598c <prvAddNewTaskToReadyList+0xc4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	4a2c      	ldr	r2, [pc, #176]	; (800598c <prvAddNewTaskToReadyList+0xc4>)
 80058dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058de:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058e6:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058ec:	4b27      	ldr	r3, [pc, #156]	; (800598c <prvAddNewTaskToReadyList+0xc4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d110      	bne.n	8005916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058f4:	f000 fc1a 	bl	800612c <prvInitialiseTaskLists>
 80058f8:	e00d      	b.n	8005916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <prvAddNewTaskToReadyList+0xcc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005902:	4b23      	ldr	r3, [pc, #140]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d802      	bhi.n	8005916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005916:	4b20      	ldr	r3, [pc, #128]	; (8005998 <prvAddNewTaskToReadyList+0xd0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <prvAddNewTaskToReadyList+0xd0>)
 800591e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005920:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <prvAddNewTaskToReadyList+0xd0>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <prvAddNewTaskToReadyList+0xd4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d903      	bls.n	800593c <prvAddNewTaskToReadyList+0x74>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a18      	ldr	r2, [pc, #96]	; (800599c <prvAddNewTaskToReadyList+0xd4>)
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <prvAddNewTaskToReadyList+0xd8>)
 800594a:	441a      	add	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f7ff f923 	bl	8004b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005958:	f001 f9fc 	bl	8006d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <prvAddNewTaskToReadyList+0xcc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00e      	beq.n	8005982 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <prvAddNewTaskToReadyList+0xc8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	429a      	cmp	r2, r3
 8005970:	d207      	bcs.n	8005982 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005972:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <prvAddNewTaskToReadyList+0xdc>)
 8005974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000c24 	.word	0x20000c24
 8005990:	20000750 	.word	0x20000750
 8005994:	20000c30 	.word	0x20000c30
 8005998:	20000c40 	.word	0x20000c40
 800599c:	20000c2c 	.word	0x20000c2c
 80059a0:	20000754 	.word	0x20000754
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d017      	beq.n	80059ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <vTaskDelay+0x60>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <vTaskDelay+0x30>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60bb      	str	r3, [r7, #8]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059d8:	f000 f880 	bl	8005adc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059dc:	2100      	movs	r1, #0
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fcf4 	bl	80063cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059e4:	f000 f888 	bl	8005af8 <xTaskResumeAll>
 80059e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <vTaskDelay+0x64>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000c4c 	.word	0x20000c4c
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a1e:	463a      	mov	r2, r7
 8005a20:	1d39      	adds	r1, r7, #4
 8005a22:	f107 0308 	add.w	r3, r7, #8
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff f858 	bl	8004adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	9202      	str	r2, [sp, #8]
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	460a      	mov	r2, r1
 8005a3e:	4921      	ldr	r1, [pc, #132]	; (8005ac4 <vTaskStartScheduler+0xb4>)
 8005a40:	4821      	ldr	r0, [pc, #132]	; (8005ac8 <vTaskStartScheduler+0xb8>)
 8005a42:	f7ff fe19 	bl	8005678 <xTaskCreateStatic>
 8005a46:	4603      	mov	r3, r0
 8005a48:	4a20      	ldr	r2, [pc, #128]	; (8005acc <vTaskStartScheduler+0xbc>)
 8005a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <vTaskStartScheduler+0xbc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a54:	2301      	movs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e001      	b.n	8005a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d102      	bne.n	8005a6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a64:	f000 fd06 	bl	8006474 <xTimerCreateTimerTask>
 8005a68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d116      	bne.n	8005a9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
}
 8005a82:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a84:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <vTaskStartScheduler+0xc0>)
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <vTaskStartScheduler+0xc4>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <vTaskStartScheduler+0xc8>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a98:	f001 f88a 	bl	8006bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a9c:	e00e      	b.n	8005abc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d10a      	bne.n	8005abc <vTaskStartScheduler+0xac>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60fb      	str	r3, [r7, #12]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <vTaskStartScheduler+0xaa>
}
 8005abc:	bf00      	nop
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	08007c00 	.word	0x08007c00
 8005ac8:	080060fd 	.word	0x080060fd
 8005acc:	20000c48 	.word	0x20000c48
 8005ad0:	20000c44 	.word	0x20000c44
 8005ad4:	20000c30 	.word	0x20000c30
 8005ad8:	20000c28 	.word	0x20000c28

08005adc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <vTaskSuspendAll+0x18>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	4a03      	ldr	r2, [pc, #12]	; (8005af4 <vTaskSuspendAll+0x18>)
 8005ae8:	6013      	str	r3, [r2, #0]
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20000c4c 	.word	0x20000c4c

08005af8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b06:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <xTaskResumeAll+0x118>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	603b      	str	r3, [r7, #0]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b24:	f001 f8e6 	bl	8006cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b28:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <xTaskResumeAll+0x118>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4a38      	ldr	r2, [pc, #224]	; (8005c10 <xTaskResumeAll+0x118>)
 8005b30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b32:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <xTaskResumeAll+0x118>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d162      	bne.n	8005c00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b3a:	4b36      	ldr	r3, [pc, #216]	; (8005c14 <xTaskResumeAll+0x11c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d05e      	beq.n	8005c00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b42:	e02f      	b.n	8005ba4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b44:	4b34      	ldr	r3, [pc, #208]	; (8005c18 <xTaskResumeAll+0x120>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff f881 	bl	8004c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff f87c 	bl	8004c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <xTaskResumeAll+0x124>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d903      	bls.n	8005b74 <xTaskResumeAll+0x7c>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4a2a      	ldr	r2, [pc, #168]	; (8005c1c <xTaskResumeAll+0x124>)
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <xTaskResumeAll+0x128>)
 8005b82:	441a      	add	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7ff f807 	bl	8004b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <xTaskResumeAll+0x12c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d302      	bcc.n	8005ba4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <xTaskResumeAll+0x130>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba4:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <xTaskResumeAll+0x120>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1cb      	bne.n	8005b44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bb2:	f000 fb59 	bl	8006268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bb6:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <xTaskResumeAll+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d010      	beq.n	8005be4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bc2:	f000 f847 	bl	8005c54 <xTaskIncrementTick>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005bcc:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <xTaskResumeAll+0x130>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f1      	bne.n	8005bc2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <xTaskResumeAll+0x134>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005be4:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xTaskResumeAll+0x130>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <xTaskResumeAll+0x138>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c00:	f001 f8a8 	bl	8006d54 <vPortExitCritical>

	return xAlreadyYielded;
 8005c04:	68bb      	ldr	r3, [r7, #8]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000c4c 	.word	0x20000c4c
 8005c14:	20000c24 	.word	0x20000c24
 8005c18:	20000be4 	.word	0x20000be4
 8005c1c:	20000c2c 	.word	0x20000c2c
 8005c20:	20000754 	.word	0x20000754
 8005c24:	20000750 	.word	0x20000750
 8005c28:	20000c38 	.word	0x20000c38
 8005c2c:	20000c34 	.word	0x20000c34
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <xTaskGetTickCount+0x1c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c40:	687b      	ldr	r3, [r7, #4]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000c28 	.word	0x20000c28

08005c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5e:	4b51      	ldr	r3, [pc, #324]	; (8005da4 <xTaskIncrementTick+0x150>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f040 808e 	bne.w	8005d84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c68:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <xTaskIncrementTick+0x154>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c70:	4a4d      	ldr	r2, [pc, #308]	; (8005da8 <xTaskIncrementTick+0x154>)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d120      	bne.n	8005cbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c7c:	4b4b      	ldr	r3, [pc, #300]	; (8005dac <xTaskIncrementTick+0x158>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	603b      	str	r3, [r7, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <xTaskIncrementTick+0x46>
 8005c9c:	4b43      	ldr	r3, [pc, #268]	; (8005dac <xTaskIncrementTick+0x158>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <xTaskIncrementTick+0x15c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a41      	ldr	r2, [pc, #260]	; (8005dac <xTaskIncrementTick+0x158>)
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4a41      	ldr	r2, [pc, #260]	; (8005db0 <xTaskIncrementTick+0x15c>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <xTaskIncrementTick+0x160>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	4a3f      	ldr	r2, [pc, #252]	; (8005db4 <xTaskIncrementTick+0x160>)
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	f000 fad5 	bl	8006268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cbe:	4b3e      	ldr	r3, [pc, #248]	; (8005db8 <xTaskIncrementTick+0x164>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d34e      	bcc.n	8005d66 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc8:	4b38      	ldr	r3, [pc, #224]	; (8005dac <xTaskIncrementTick+0x158>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <xTaskIncrementTick+0x82>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <xTaskIncrementTick+0x84>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <xTaskIncrementTick+0x164>)
 8005cde:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce2:	601a      	str	r2, [r3, #0]
					break;
 8005ce4:	e03f      	b.n	8005d66 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ce6:	4b31      	ldr	r3, [pc, #196]	; (8005dac <xTaskIncrementTick+0x158>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d203      	bcs.n	8005d06 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cfe:	4a2e      	ldr	r2, [pc, #184]	; (8005db8 <xTaskIncrementTick+0x164>)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6013      	str	r3, [r2, #0]
						break;
 8005d04:	e02f      	b.n	8005d66 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe ffa4 	bl	8004c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	3318      	adds	r3, #24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe ff9b 	bl	8004c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <xTaskIncrementTick+0x168>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d903      	bls.n	8005d36 <xTaskIncrementTick+0xe2>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	4a22      	ldr	r2, [pc, #136]	; (8005dbc <xTaskIncrementTick+0x168>)
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4a1f      	ldr	r2, [pc, #124]	; (8005dc0 <xTaskIncrementTick+0x16c>)
 8005d44:	441a      	add	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f7fe ff26 	bl	8004b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4b1b      	ldr	r3, [pc, #108]	; (8005dc4 <xTaskIncrementTick+0x170>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d3b3      	bcc.n	8005cc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d60:	2301      	movs	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d64:	e7b0      	b.n	8005cc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d66:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <xTaskIncrementTick+0x170>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6c:	4914      	ldr	r1, [pc, #80]	; (8005dc0 <xTaskIncrementTick+0x16c>)
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d907      	bls.n	8005d8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e004      	b.n	8005d8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d84:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <xTaskIncrementTick+0x174>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	; (8005dc8 <xTaskIncrementTick+0x174>)
 8005d8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <xTaskIncrementTick+0x178>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000c4c 	.word	0x20000c4c
 8005da8:	20000c28 	.word	0x20000c28
 8005dac:	20000bdc 	.word	0x20000bdc
 8005db0:	20000be0 	.word	0x20000be0
 8005db4:	20000c3c 	.word	0x20000c3c
 8005db8:	20000c44 	.word	0x20000c44
 8005dbc:	20000c2c 	.word	0x20000c2c
 8005dc0:	20000754 	.word	0x20000754
 8005dc4:	20000750 	.word	0x20000750
 8005dc8:	20000c34 	.word	0x20000c34
 8005dcc:	20000c38 	.word	0x20000c38

08005dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dd6:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <vTaskSwitchContext+0xa8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dde:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <vTaskSwitchContext+0xac>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005de4:	e041      	b.n	8005e6a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005de6:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <vTaskSwitchContext+0xac>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005dec:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <vTaskSwitchContext+0xb0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e010      	b.n	8005e16 <vTaskSwitchContext+0x46>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <vTaskSwitchContext+0x40>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	607b      	str	r3, [r7, #4]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <vTaskSwitchContext+0x3e>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	491b      	ldr	r1, [pc, #108]	; (8005e84 <vTaskSwitchContext+0xb4>)
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0e4      	beq.n	8005df4 <vTaskSwitchContext+0x24>
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <vTaskSwitchContext+0xb4>)
 8005e36:	4413      	add	r3, r2
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d104      	bne.n	8005e5a <vTaskSwitchContext+0x8a>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <vTaskSwitchContext+0xb8>)
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <vTaskSwitchContext+0xb0>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6013      	str	r3, [r2, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	20000c4c 	.word	0x20000c4c
 8005e7c:	20000c38 	.word	0x20000c38
 8005e80:	20000c2c 	.word	0x20000c2c
 8005e84:	20000754 	.word	0x20000754
 8005e88:	20000750 	.word	0x20000750

08005e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60fb      	str	r3, [r7, #12]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <vTaskPlaceOnEventList+0x44>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3318      	adds	r3, #24
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fe fe93 	bl	8004be6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	6838      	ldr	r0, [r7, #0]
 8005ec4:	f000 fa82 	bl	80063cc <prvAddCurrentTaskToDelayedList>
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000750 	.word	0x20000750

08005ed4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	617b      	str	r3, [r7, #20]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <vTaskPlaceOnEventListRestricted+0x54>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3318      	adds	r3, #24
 8005f02:	4619      	mov	r1, r3
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7fe fe4a 	bl	8004b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f10:	f04f 33ff 	mov.w	r3, #4294967295
 8005f14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	68b8      	ldr	r0, [r7, #8]
 8005f1a:	f000 fa57 	bl	80063cc <prvAddCurrentTaskToDelayedList>
	}
 8005f1e:	bf00      	nop
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000750 	.word	0x20000750

08005f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	60fb      	str	r3, [r7, #12]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fe7b 	bl	8004c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f62:	4b1e      	ldr	r3, [pc, #120]	; (8005fdc <xTaskRemoveFromEventList+0xb0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11d      	bne.n	8005fa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fe72 	bl	8004c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <xTaskRemoveFromEventList+0xb4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d903      	bls.n	8005f88 <xTaskRemoveFromEventList+0x5c>
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <xTaskRemoveFromEventList+0xb4>)
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <xTaskRemoveFromEventList+0xb8>)
 8005f96:	441a      	add	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fe fdfd 	bl	8004b9e <vListInsertEnd>
 8005fa4:	e005      	b.n	8005fb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3318      	adds	r3, #24
 8005faa:	4619      	mov	r1, r3
 8005fac:	480e      	ldr	r0, [pc, #56]	; (8005fe8 <xTaskRemoveFromEventList+0xbc>)
 8005fae:	f7fe fdf6 	bl	8004b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <xTaskRemoveFromEventList+0xc0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d905      	bls.n	8005fcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <xTaskRemoveFromEventList+0xc4>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e001      	b.n	8005fd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005fd0:	697b      	ldr	r3, [r7, #20]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000c4c 	.word	0x20000c4c
 8005fe0:	20000c2c 	.word	0x20000c2c
 8005fe4:	20000754 	.word	0x20000754
 8005fe8:	20000be4 	.word	0x20000be4
 8005fec:	20000750 	.word	0x20000750
 8005ff0:	20000c38 	.word	0x20000c38

08005ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <vTaskInternalSetTimeOutState+0x24>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <vTaskInternalSetTimeOutState+0x28>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	605a      	str	r2, [r3, #4]
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	20000c3c 	.word	0x20000c3c
 800601c:	20000c28 	.word	0x20000c28

08006020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	613b      	str	r3, [r7, #16]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60fb      	str	r3, [r7, #12]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006062:	f000 fe47 	bl	8006cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <xTaskCheckForTimeOut+0xbc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d102      	bne.n	8006086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006080:	2300      	movs	r3, #0
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	e023      	b.n	80060ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <xTaskCheckForTimeOut+0xc0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d007      	beq.n	80060a2 <xTaskCheckForTimeOut+0x82>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	e015      	b.n	80060ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d20b      	bcs.n	80060c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad2      	subs	r2, r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ff9b 	bl	8005ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
 80060c2:	e004      	b.n	80060ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060ce:	f000 fe41 	bl	8006d54 <vPortExitCritical>

	return xReturn;
 80060d2:	69fb      	ldr	r3, [r7, #28]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000c28 	.word	0x20000c28
 80060e0:	20000c3c 	.word	0x20000c3c

080060e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <vTaskMissedYield+0x14>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
}
 80060ee:	bf00      	nop
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	20000c38 	.word	0x20000c38

080060fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006104:	f000 f852 	bl	80061ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006108:	4b06      	ldr	r3, [pc, #24]	; (8006124 <prvIdleTask+0x28>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d9f9      	bls.n	8006104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <prvIdleTask+0x2c>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006120:	e7f0      	b.n	8006104 <prvIdleTask+0x8>
 8006122:	bf00      	nop
 8006124:	20000754 	.word	0x20000754
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	e00c      	b.n	8006152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4a12      	ldr	r2, [pc, #72]	; (800618c <prvInitialiseTaskLists+0x60>)
 8006144:	4413      	add	r3, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fcfc 	bl	8004b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3301      	adds	r3, #1
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b37      	cmp	r3, #55	; 0x37
 8006156:	d9ef      	bls.n	8006138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006158:	480d      	ldr	r0, [pc, #52]	; (8006190 <prvInitialiseTaskLists+0x64>)
 800615a:	f7fe fcf3 	bl	8004b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800615e:	480d      	ldr	r0, [pc, #52]	; (8006194 <prvInitialiseTaskLists+0x68>)
 8006160:	f7fe fcf0 	bl	8004b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006164:	480c      	ldr	r0, [pc, #48]	; (8006198 <prvInitialiseTaskLists+0x6c>)
 8006166:	f7fe fced 	bl	8004b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800616a:	480c      	ldr	r0, [pc, #48]	; (800619c <prvInitialiseTaskLists+0x70>)
 800616c:	f7fe fcea 	bl	8004b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006170:	480b      	ldr	r0, [pc, #44]	; (80061a0 <prvInitialiseTaskLists+0x74>)
 8006172:	f7fe fce7 	bl	8004b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <prvInitialiseTaskLists+0x78>)
 8006178:	4a05      	ldr	r2, [pc, #20]	; (8006190 <prvInitialiseTaskLists+0x64>)
 800617a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <prvInitialiseTaskLists+0x7c>)
 800617e:	4a05      	ldr	r2, [pc, #20]	; (8006194 <prvInitialiseTaskLists+0x68>)
 8006180:	601a      	str	r2, [r3, #0]
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000754 	.word	0x20000754
 8006190:	20000bb4 	.word	0x20000bb4
 8006194:	20000bc8 	.word	0x20000bc8
 8006198:	20000be4 	.word	0x20000be4
 800619c:	20000bf8 	.word	0x20000bf8
 80061a0:	20000c10 	.word	0x20000c10
 80061a4:	20000bdc 	.word	0x20000bdc
 80061a8:	20000be0 	.word	0x20000be0

080061ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b2:	e019      	b.n	80061e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061b4:	f000 fd9e 	bl	8006cf4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061b8:	4b10      	ldr	r3, [pc, #64]	; (80061fc <prvCheckTasksWaitingTermination+0x50>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fd47 	bl	8004c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <prvCheckTasksWaitingTermination+0x54>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <prvCheckTasksWaitingTermination+0x54>)
 80061d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <prvCheckTasksWaitingTermination+0x58>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3b01      	subs	r3, #1
 80061da:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <prvCheckTasksWaitingTermination+0x58>)
 80061dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061de:	f000 fdb9 	bl	8006d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f810 	bl	8006208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <prvCheckTasksWaitingTermination+0x58>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e1      	bne.n	80061b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000bf8 	.word	0x20000bf8
 8006200:	20000c24 	.word	0x20000c24
 8006204:	20000c0c 	.word	0x20000c0c

08006208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006216:	2b00      	cmp	r3, #0
 8006218:	d108      	bne.n	800622c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	4618      	mov	r0, r3
 8006220:	f000 ff4e 	bl	80070c0 <vPortFree>
				vPortFree( pxTCB );
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 ff4b 	bl	80070c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800622a:	e018      	b.n	800625e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006232:	2b01      	cmp	r3, #1
 8006234:	d103      	bne.n	800623e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 ff42 	bl	80070c0 <vPortFree>
	}
 800623c:	e00f      	b.n	800625e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006244:	2b02      	cmp	r3, #2
 8006246:	d00a      	beq.n	800625e <prvDeleteTCB+0x56>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	60fb      	str	r3, [r7, #12]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <prvDeleteTCB+0x54>
	}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <prvResetNextTaskUnblockTime+0x44>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <prvResetNextTaskUnblockTime+0x14>
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <prvResetNextTaskUnblockTime+0x16>
 800627c:	2300      	movs	r3, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <prvResetNextTaskUnblockTime+0x48>)
 8006284:	f04f 32ff 	mov.w	r2, #4294967295
 8006288:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800628a:	e008      	b.n	800629e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800628c:	4b07      	ldr	r3, [pc, #28]	; (80062ac <prvResetNextTaskUnblockTime+0x44>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4a05      	ldr	r2, [pc, #20]	; (80062b0 <prvResetNextTaskUnblockTime+0x48>)
 800629c:	6013      	str	r3, [r2, #0]
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	20000bdc 	.word	0x20000bdc
 80062b0:	20000c44 	.word	0x20000c44

080062b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <xTaskGetSchedulerState+0x34>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062c2:	2301      	movs	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	e008      	b.n	80062da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c8:	4b08      	ldr	r3, [pc, #32]	; (80062ec <xTaskGetSchedulerState+0x38>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062d0:	2302      	movs	r3, #2
 80062d2:	607b      	str	r3, [r7, #4]
 80062d4:	e001      	b.n	80062da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062da:	687b      	ldr	r3, [r7, #4]
	}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	20000c30 	.word	0x20000c30
 80062ec:	20000c4c 	.word	0x20000c4c

080062f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d056      	beq.n	80063b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006306:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <xTaskPriorityDisinherit+0xd0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	429a      	cmp	r2, r3
 800630e:	d00a      	beq.n	8006326 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	60fb      	str	r3, [r7, #12]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60bb      	str	r3, [r7, #8]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006356:	429a      	cmp	r2, r3
 8006358:	d02c      	beq.n	80063b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635e:	2b00      	cmp	r3, #0
 8006360:	d128      	bne.n	80063b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fc76 	bl	8004c58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <xTaskPriorityDisinherit+0xd4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d903      	bls.n	8006394 <xTaskPriorityDisinherit+0xa4>
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <xTaskPriorityDisinherit+0xd4>)
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <xTaskPriorityDisinherit+0xd8>)
 80063a2:	441a      	add	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe fbf7 	bl	8004b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063b4:	697b      	ldr	r3, [r7, #20]
	}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000750 	.word	0x20000750
 80063c4:	20000c2c 	.word	0x20000c2c
 80063c8:	20000754 	.word	0x20000754

080063cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <prvAddCurrentTaskToDelayedList+0x90>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fc38 	bl	8004c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	d10a      	bne.n	8006406 <prvAddCurrentTaskToDelayedList+0x3a>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4819      	ldr	r0, [pc, #100]	; (8006464 <prvAddCurrentTaskToDelayedList+0x98>)
 8006400:	f7fe fbcd 	bl	8004b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006404:	e026      	b.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	d209      	bcs.n	8006432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f7fe fbdb 	bl	8004be6 <vListInsert>
}
 8006430:	e010      	b.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006432:	4b0e      	ldr	r3, [pc, #56]	; (800646c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <prvAddCurrentTaskToDelayedList+0x94>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe fbd1 	bl	8004be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d202      	bcs.n	8006454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800644e:	4a08      	ldr	r2, [pc, #32]	; (8006470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6013      	str	r3, [r2, #0]
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000c28 	.word	0x20000c28
 8006460:	20000750 	.word	0x20000750
 8006464:	20000c10 	.word	0x20000c10
 8006468:	20000be0 	.word	0x20000be0
 800646c:	20000bdc 	.word	0x20000bdc
 8006470:	20000c44 	.word	0x20000c44

08006474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800647e:	f000 facb 	bl	8006a18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006482:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <xTimerCreateTimerTask+0x80>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d021      	beq.n	80064ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006492:	1d3a      	adds	r2, r7, #4
 8006494:	f107 0108 	add.w	r1, r7, #8
 8006498:	f107 030c 	add.w	r3, r7, #12
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fb37 	bl	8004b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	9202      	str	r2, [sp, #8]
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	2302      	movs	r3, #2
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	460a      	mov	r2, r1
 80064b4:	4910      	ldr	r1, [pc, #64]	; (80064f8 <xTimerCreateTimerTask+0x84>)
 80064b6:	4811      	ldr	r0, [pc, #68]	; (80064fc <xTimerCreateTimerTask+0x88>)
 80064b8:	f7ff f8de 	bl	8005678 <xTaskCreateStatic>
 80064bc:	4603      	mov	r3, r0
 80064be:	4a10      	ldr	r2, [pc, #64]	; (8006500 <xTimerCreateTimerTask+0x8c>)
 80064c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064c2:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <xTimerCreateTimerTask+0x8c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064ca:	2301      	movs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	613b      	str	r3, [r7, #16]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064ea:	697b      	ldr	r3, [r7, #20]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000c80 	.word	0x20000c80
 80064f8:	08007c08 	.word	0x08007c08
 80064fc:	08006621 	.word	0x08006621
 8006500:	20000c84 	.word	0x20000c84

08006504 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xTimerGenericCommand+0x2e>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	623b      	str	r3, [r7, #32]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006532:	4b1a      	ldr	r3, [pc, #104]	; (800659c <xTimerGenericCommand+0x98>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d02a      	beq.n	8006590 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b05      	cmp	r3, #5
 800654a:	dc18      	bgt.n	800657e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800654c:	f7ff feb2 	bl	80062b4 <xTaskGetSchedulerState>
 8006550:	4603      	mov	r3, r0
 8006552:	2b02      	cmp	r3, #2
 8006554:	d109      	bne.n	800656a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <xTimerGenericCommand+0x98>)
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	f107 0110 	add.w	r1, r7, #16
 800655e:	2300      	movs	r3, #0
 8006560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006562:	f7fe fca5 	bl	8004eb0 <xQueueGenericSend>
 8006566:	6278      	str	r0, [r7, #36]	; 0x24
 8006568:	e012      	b.n	8006590 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800656a:	4b0c      	ldr	r3, [pc, #48]	; (800659c <xTimerGenericCommand+0x98>)
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	f107 0110 	add.w	r1, r7, #16
 8006572:	2300      	movs	r3, #0
 8006574:	2200      	movs	r2, #0
 8006576:	f7fe fc9b 	bl	8004eb0 <xQueueGenericSend>
 800657a:	6278      	str	r0, [r7, #36]	; 0x24
 800657c:	e008      	b.n	8006590 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800657e:	4b07      	ldr	r3, [pc, #28]	; (800659c <xTimerGenericCommand+0x98>)
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	f107 0110 	add.w	r1, r7, #16
 8006586:	2300      	movs	r3, #0
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	f7fe fd8f 	bl	80050ac <xQueueGenericSendFromISR>
 800658e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006592:	4618      	mov	r0, r3
 8006594:	3728      	adds	r7, #40	; 0x28
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000c80 	.word	0x20000c80

080065a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065aa:	4b1c      	ldr	r3, [pc, #112]	; (800661c <prvProcessExpiredTimer+0x7c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe fb4d 	bl	8004c58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d122      	bne.n	800660c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	18d1      	adds	r1, r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	6978      	ldr	r0, [r7, #20]
 80065d4:	f000 f8c8 	bl	8006768 <prvInsertTimerInActiveList>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d016      	beq.n	800660c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065de:	2300      	movs	r3, #0
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	2300      	movs	r3, #0
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	2100      	movs	r1, #0
 80065e8:	6978      	ldr	r0, [r7, #20]
 80065ea:	f7ff ff8b 	bl	8006504 <xTimerGenericCommand>
 80065ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60fb      	str	r3, [r7, #12]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	6978      	ldr	r0, [r7, #20]
 8006612:	4798      	blx	r3
}
 8006614:	bf00      	nop
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000c78 	.word	0x20000c78

08006620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4618      	mov	r0, r3
 800662e:	f000 f857 	bl	80066e0 <prvGetNextExpireTime>
 8006632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4619      	mov	r1, r3
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f803 	bl	8006644 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800663e:	f000 f8d5 	bl	80067ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006642:	e7f1      	b.n	8006628 <prvTimerTask+0x8>

08006644 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800664e:	f7ff fa45 	bl	8005adc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006652:	f107 0308 	add.w	r3, r7, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f000 f866 	bl	8006728 <prvSampleTimeNow>
 800665c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d130      	bne.n	80066c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <prvProcessTimerOrBlockTask+0x3c>
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	429a      	cmp	r2, r3
 8006670:	d806      	bhi.n	8006680 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006672:	f7ff fa41 	bl	8005af8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff91 	bl	80065a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800667e:	e024      	b.n	80066ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006686:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <prvProcessTimerOrBlockTask+0x90>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <prvProcessTimerOrBlockTask+0x94>)
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	f7fe ffb3 	bl	8005610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066aa:	f7ff fa25 	bl	8005af8 <xTaskResumeAll>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066b4:	4b09      	ldr	r3, [pc, #36]	; (80066dc <prvProcessTimerOrBlockTask+0x98>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
}
 80066c4:	e001      	b.n	80066ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066c6:	f7ff fa17 	bl	8005af8 <xTaskResumeAll>
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000c7c 	.word	0x20000c7c
 80066d8:	20000c80 	.word	0x20000c80
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <prvGetNextExpireTime+0x44>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d105      	bne.n	8006712 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <prvGetNextExpireTime+0x44>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e001      	b.n	8006716 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	20000c78 	.word	0x20000c78

08006728 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006730:	f7ff fa80 	bl	8005c34 <xTaskGetTickCount>
 8006734:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006736:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <prvSampleTimeNow+0x3c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d205      	bcs.n	800674c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006740:	f000 f908 	bl	8006954 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e002      	b.n	8006752 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006752:	4a04      	ldr	r2, [pc, #16]	; (8006764 <prvSampleTimeNow+0x3c>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000c88 	.word	0x20000c88

08006768 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	429a      	cmp	r2, r3
 800678c:	d812      	bhi.n	80067b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad2      	subs	r2, r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	429a      	cmp	r2, r3
 800679a:	d302      	bcc.n	80067a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e01b      	b.n	80067da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067a2:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <prvInsertTimerInActiveList+0x7c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7fe fa1a 	bl	8004be6 <vListInsert>
 80067b2:	e012      	b.n	80067da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d206      	bcs.n	80067ca <prvInsertTimerInActiveList+0x62>
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d302      	bcc.n	80067ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	e007      	b.n	80067da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <prvInsertTimerInActiveList+0x80>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f7fe fa06 	bl	8004be6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067da:	697b      	ldr	r3, [r7, #20]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000c7c 	.word	0x20000c7c
 80067e8:	20000c78 	.word	0x20000c78

080067ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	; 0x38
 80067f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067f2:	e09d      	b.n	8006930 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da18      	bge.n	800682c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	3304      	adds	r3, #4
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	61fb      	str	r3, [r7, #28]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006822:	6850      	ldr	r0, [r2, #4]
 8006824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006826:	6892      	ldr	r2, [r2, #8]
 8006828:	4611      	mov	r1, r2
 800682a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	db7d      	blt.n	800692e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	3304      	adds	r3, #4
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fa08 	bl	8004c58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006848:	463b      	mov	r3, r7
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff ff6c 	bl	8006728 <prvSampleTimeNow>
 8006850:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b09      	cmp	r3, #9
 8006856:	d86b      	bhi.n	8006930 <prvProcessReceivedCommands+0x144>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <prvProcessReceivedCommands+0x74>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006889 	.word	0x08006889
 8006864:	08006889 	.word	0x08006889
 8006868:	08006889 	.word	0x08006889
 800686c:	08006931 	.word	0x08006931
 8006870:	080068e5 	.word	0x080068e5
 8006874:	0800691d 	.word	0x0800691d
 8006878:	08006889 	.word	0x08006889
 800687c:	08006889 	.word	0x08006889
 8006880:	08006931 	.word	0x08006931
 8006884:	080068e5 	.word	0x080068e5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	18d1      	adds	r1, r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006896:	f7ff ff67 	bl	8006768 <prvInsertTimerInActiveList>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d047      	beq.n	8006930 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d13f      	bne.n	8006930 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	441a      	add	r2, r3
 80068b8:	2300      	movs	r3, #0
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	2300      	movs	r3, #0
 80068be:	2100      	movs	r1, #0
 80068c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c2:	f7ff fe1f 	bl	8006504 <xTimerGenericCommand>
 80068c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d130      	bne.n	8006930 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	61bb      	str	r3, [r7, #24]
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	617b      	str	r3, [r7, #20]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	18d1      	adds	r1, r2, r3
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006916:	f7ff ff27 	bl	8006768 <prvInsertTimerInActiveList>
					break;
 800691a:	e009      	b.n	8006930 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006928:	f000 fbca 	bl	80070c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800692c:	e000      	b.n	8006930 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800692e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <prvProcessReceivedCommands+0x164>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	1d39      	adds	r1, r7, #4
 8006936:	2200      	movs	r2, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fc4f 	bl	80051dc <xQueueReceive>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	f47f af57 	bne.w	80067f4 <prvProcessReceivedCommands+0x8>
	}
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	3730      	adds	r7, #48	; 0x30
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000c80 	.word	0x20000c80

08006954 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800695a:	e045      	b.n	80069e8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800695c:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <prvSwitchTimerLists+0xbc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006966:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <prvSwitchTimerLists+0xbc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe f96f 	bl	8004c58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d12e      	bne.n	80069e8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	429a      	cmp	r2, r3
 800699a:	d90e      	bls.n	80069ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069a8:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <prvSwitchTimerLists+0xbc>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f7fe f917 	bl	8004be6 <vListInsert>
 80069b8:	e016      	b.n	80069e8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069ba:	2300      	movs	r3, #0
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	2100      	movs	r1, #0
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fd9d 	bl	8006504 <xTimerGenericCommand>
 80069ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	603b      	str	r3, [r7, #0]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <prvSwitchTimerLists+0xbc>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1b4      	bne.n	800695c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <prvSwitchTimerLists+0xbc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069f8:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <prvSwitchTimerLists+0xc0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <prvSwitchTimerLists+0xbc>)
 80069fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a00:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <prvSwitchTimerLists+0xc0>)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6013      	str	r3, [r2, #0]
}
 8006a06:	bf00      	nop
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000c78 	.word	0x20000c78
 8006a14:	20000c7c 	.word	0x20000c7c

08006a18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a1e:	f000 f969 	bl	8006cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <prvCheckForValidListAndQueue+0x60>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d120      	bne.n	8006a6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a2a:	4814      	ldr	r0, [pc, #80]	; (8006a7c <prvCheckForValidListAndQueue+0x64>)
 8006a2c:	f7fe f88a 	bl	8004b44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a30:	4813      	ldr	r0, [pc, #76]	; (8006a80 <prvCheckForValidListAndQueue+0x68>)
 8006a32:	f7fe f887 	bl	8004b44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <prvCheckForValidListAndQueue+0x6c>)
 8006a38:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <prvCheckForValidListAndQueue+0x64>)
 8006a3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a3c:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <prvCheckForValidListAndQueue+0x70>)
 8006a3e:	4a10      	ldr	r2, [pc, #64]	; (8006a80 <prvCheckForValidListAndQueue+0x68>)
 8006a40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a42:	2300      	movs	r3, #0
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <prvCheckForValidListAndQueue+0x74>)
 8006a48:	4a11      	ldr	r2, [pc, #68]	; (8006a90 <prvCheckForValidListAndQueue+0x78>)
 8006a4a:	2110      	movs	r1, #16
 8006a4c:	200a      	movs	r0, #10
 8006a4e:	f7fe f995 	bl	8004d7c <xQueueGenericCreateStatic>
 8006a52:	4603      	mov	r3, r0
 8006a54:	4a08      	ldr	r2, [pc, #32]	; (8006a78 <prvCheckForValidListAndQueue+0x60>)
 8006a56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a58:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <prvCheckForValidListAndQueue+0x60>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <prvCheckForValidListAndQueue+0x60>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	490b      	ldr	r1, [pc, #44]	; (8006a94 <prvCheckForValidListAndQueue+0x7c>)
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fda8 	bl	80055bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a6c:	f000 f972 	bl	8006d54 <vPortExitCritical>
}
 8006a70:	bf00      	nop
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000c80 	.word	0x20000c80
 8006a7c:	20000c50 	.word	0x20000c50
 8006a80:	20000c64 	.word	0x20000c64
 8006a84:	20000c78 	.word	0x20000c78
 8006a88:	20000c7c 	.word	0x20000c7c
 8006a8c:	20000d2c 	.word	0x20000d2c
 8006a90:	20000c8c 	.word	0x20000c8c
 8006a94:	08007c10 	.word	0x08007c10

08006a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3b04      	subs	r3, #4
 8006ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f023 0201 	bic.w	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ac8:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <pxPortInitialiseStack+0x64>)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3b14      	subs	r3, #20
 8006ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3b04      	subs	r3, #4
 8006ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f06f 0202 	mvn.w	r2, #2
 8006ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3b20      	subs	r3, #32
 8006aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aee:	68fb      	ldr	r3, [r7, #12]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	08006b01 	.word	0x08006b01

08006b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <prvTaskExitError+0x54>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d00a      	beq.n	8006b2a <prvTaskExitError+0x2a>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60fb      	str	r3, [r7, #12]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <prvTaskExitError+0x28>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	60bb      	str	r3, [r7, #8]
}
 8006b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b3e:	bf00      	nop
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0fc      	beq.n	8006b40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	2000000c 	.word	0x2000000c
	...

08006b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <pxCurrentTCBConst2>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	f380 8809 	msr	PSP, r0
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	4770      	bx	lr
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst2>:
 8006b80:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b88:	4808      	ldr	r0, [pc, #32]	; (8006bac <prvPortStartFirstTask+0x24>)
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	6800      	ldr	r0, [r0, #0]
 8006b8e:	f380 8808 	msr	MSP, r0
 8006b92:	f04f 0000 	mov.w	r0, #0
 8006b96:	f380 8814 	msr	CONTROL, r0
 8006b9a:	b662      	cpsie	i
 8006b9c:	b661      	cpsie	f
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	df00      	svc	0
 8006ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006baa:	bf00      	nop
 8006bac:	e000ed08 	.word	0xe000ed08

08006bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bb6:	4b46      	ldr	r3, [pc, #280]	; (8006cd0 <xPortStartScheduler+0x120>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a46      	ldr	r2, [pc, #280]	; (8006cd4 <xPortStartScheduler+0x124>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d10a      	bne.n	8006bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006bd6:	4b3e      	ldr	r3, [pc, #248]	; (8006cd0 <xPortStartScheduler+0x120>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a3f      	ldr	r2, [pc, #252]	; (8006cd8 <xPortStartScheduler+0x128>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d10a      	bne.n	8006bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bf6:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <xPortStartScheduler+0x12c>)
 8006bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	22ff      	movs	r2, #255	; 0xff
 8006c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4b31      	ldr	r3, [pc, #196]	; (8006ce0 <xPortStartScheduler+0x130>)
 8006c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c1e:	4b31      	ldr	r3, [pc, #196]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c20:	2207      	movs	r2, #7
 8006c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c24:	e009      	b.n	8006c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006c26:	4b2f      	ldr	r3, [pc, #188]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d0ef      	beq.n	8006c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c46:	4b27      	ldr	r3, [pc, #156]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f1c3 0307 	rsb	r3, r3, #7
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d00a      	beq.n	8006c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	60bb      	str	r3, [r7, #8]
}
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c68:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c72:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ce4 <xPortStartScheduler+0x134>)
 8006c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c86:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c92:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <xPortStartScheduler+0x138>)
 8006c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c9e:	f000 f8dd 	bl	8006e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <xPortStartScheduler+0x13c>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ca8:	f000 f8fc 	bl	8006ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cac:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <xPortStartScheduler+0x140>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a0f      	ldr	r2, [pc, #60]	; (8006cf0 <xPortStartScheduler+0x140>)
 8006cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cb8:	f7ff ff66 	bl	8006b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cbc:	f7ff f888 	bl	8005dd0 <vTaskSwitchContext>
	prvTaskExitError();
 8006cc0:	f7ff ff1e 	bl	8006b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	e000ed00 	.word	0xe000ed00
 8006cd4:	410fc271 	.word	0x410fc271
 8006cd8:	410fc270 	.word	0x410fc270
 8006cdc:	e000e400 	.word	0xe000e400
 8006ce0:	20000d7c 	.word	0x20000d7c
 8006ce4:	20000d80 	.word	0x20000d80
 8006ce8:	e000ed20 	.word	0xe000ed20
 8006cec:	2000000c 	.word	0x2000000c
 8006cf0:	e000ef34 	.word	0xe000ef34

08006cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	607b      	str	r3, [r7, #4]
}
 8006d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d0e:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <vPortEnterCritical+0x58>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	4a0d      	ldr	r2, [pc, #52]	; (8006d4c <vPortEnterCritical+0x58>)
 8006d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <vPortEnterCritical+0x58>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d10f      	bne.n	8006d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vPortEnterCritical+0x5c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	603b      	str	r3, [r7, #0]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <vPortEnterCritical+0x4a>
	}
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	2000000c 	.word	0x2000000c
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d5a:	4b12      	ldr	r3, [pc, #72]	; (8006da4 <vPortExitCritical+0x50>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <vPortExitCritical+0x24>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	607b      	str	r3, [r7, #4]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <vPortExitCritical+0x50>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <vPortExitCritical+0x50>)
 8006d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d82:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <vPortExitCritical+0x50>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <vPortExitCritical+0x42>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	f383 8811 	msr	BASEPRI, r3
}
 8006d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	2000000c 	.word	0x2000000c
	...

08006db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006db0:	f3ef 8009 	mrs	r0, PSP
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <pxCurrentTCBConst>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	f01e 0f10 	tst.w	lr, #16
 8006dc0:	bf08      	it	eq
 8006dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dca:	6010      	str	r0, [r2, #0]
 8006dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dd4:	f380 8811 	msr	BASEPRI, r0
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f7fe fff6 	bl	8005dd0 <vTaskSwitchContext>
 8006de4:	f04f 0000 	mov.w	r0, #0
 8006de8:	f380 8811 	msr	BASEPRI, r0
 8006dec:	bc09      	pop	{r0, r3}
 8006dee:	6819      	ldr	r1, [r3, #0]
 8006df0:	6808      	ldr	r0, [r1, #0]
 8006df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df6:	f01e 0f10 	tst.w	lr, #16
 8006dfa:	bf08      	it	eq
 8006dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e00:	f380 8809 	msr	PSP, r0
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	f3af 8000 	nop.w

08006e10 <pxCurrentTCBConst>:
 8006e10:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop

08006e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	607b      	str	r3, [r7, #4]
}
 8006e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e32:	f7fe ff0f 	bl	8005c54 <xTaskIncrementTick>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <SysTick_Handler+0x40>)
 8006e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f383 8811 	msr	BASEPRI, r3
}
 8006e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <vPortSetupTimerInterrupt+0x34>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <vPortSetupTimerInterrupt+0x38>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <vPortSetupTimerInterrupt+0x3c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <vPortSetupTimerInterrupt+0x40>)
 8006e72:	fba2 2303 	umull	r2, r3, r2, r3
 8006e76:	099b      	lsrs	r3, r3, #6
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <vPortSetupTimerInterrupt+0x44>)
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e7e:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <vPortSetupTimerInterrupt+0x34>)
 8006e80:	2207      	movs	r2, #7
 8006e82:	601a      	str	r2, [r3, #0]
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	e000e010 	.word	0xe000e010
 8006e94:	e000e018 	.word	0xe000e018
 8006e98:	20000000 	.word	0x20000000
 8006e9c:	10624dd3 	.word	0x10624dd3
 8006ea0:	e000e014 	.word	0xe000e014

08006ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006eb4 <vPortEnableVFP+0x10>
 8006ea8:	6801      	ldr	r1, [r0, #0]
 8006eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006eae:	6001      	str	r1, [r0, #0]
 8006eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006eb2:	bf00      	nop
 8006eb4:	e000ed88 	.word	0xe000ed88

08006eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ebe:	f3ef 8305 	mrs	r3, IPSR
 8006ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b0f      	cmp	r3, #15
 8006ec8:	d914      	bls.n	8006ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eca:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <vPortValidateInterruptPriority+0x70>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ed4:	4b15      	ldr	r3, [pc, #84]	; (8006f2c <vPortValidateInterruptPriority+0x74>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	7afa      	ldrb	r2, [r7, #11]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d20a      	bcs.n	8006ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	607b      	str	r3, [r7, #4]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <vPortValidateInterruptPriority+0x78>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <vPortValidateInterruptPriority+0x7c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d90a      	bls.n	8006f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	603b      	str	r3, [r7, #0]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <vPortValidateInterruptPriority+0x60>
	}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	e000e3f0 	.word	0xe000e3f0
 8006f2c:	20000d7c 	.word	0x20000d7c
 8006f30:	e000ed0c 	.word	0xe000ed0c
 8006f34:	20000d80 	.word	0x20000d80

08006f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f44:	f7fe fdca 	bl	8005adc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f48:	4b58      	ldr	r3, [pc, #352]	; (80070ac <pvPortMalloc+0x174>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f50:	f000 f910 	bl	8007174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f54:	4b56      	ldr	r3, [pc, #344]	; (80070b0 <pvPortMalloc+0x178>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f040 808e 	bne.w	800707e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01d      	beq.n	8006fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f68:	2208      	movs	r2, #8
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d014      	beq.n	8006fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f023 0307 	bic.w	r3, r3, #7
 8006f80:	3308      	adds	r3, #8
 8006f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	617b      	str	r3, [r7, #20]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d069      	beq.n	800707e <pvPortMalloc+0x146>
 8006faa:	4b42      	ldr	r3, [pc, #264]	; (80070b4 <pvPortMalloc+0x17c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d864      	bhi.n	800707e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fb4:	4b40      	ldr	r3, [pc, #256]	; (80070b8 <pvPortMalloc+0x180>)
 8006fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fb8:	4b3f      	ldr	r3, [pc, #252]	; (80070b8 <pvPortMalloc+0x180>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fbe:	e004      	b.n	8006fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d903      	bls.n	8006fdc <pvPortMalloc+0xa4>
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1f1      	bne.n	8006fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fdc:	4b33      	ldr	r3, [pc, #204]	; (80070ac <pvPortMalloc+0x174>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d04b      	beq.n	800707e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2208      	movs	r2, #8
 8006fec:	4413      	add	r3, r2
 8006fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	2308      	movs	r3, #8
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	429a      	cmp	r2, r3
 8007006:	d91f      	bls.n	8007048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <pvPortMalloc+0xf8>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	613b      	str	r3, [r7, #16]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	1ad2      	subs	r2, r2, r3
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007042:	69b8      	ldr	r0, [r7, #24]
 8007044:	f000 f8f8 	bl	8007238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007048:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <pvPortMalloc+0x17c>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <pvPortMalloc+0x17c>)
 8007054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007056:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <pvPortMalloc+0x17c>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <pvPortMalloc+0x184>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d203      	bcs.n	800706a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007062:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <pvPortMalloc+0x17c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <pvPortMalloc+0x184>)
 8007068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <pvPortMalloc+0x178>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	431a      	orrs	r2, r3
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800707e:	f7fe fd3b 	bl	8005af8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <pvPortMalloc+0x16a>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60fb      	str	r3, [r7, #12]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <pvPortMalloc+0x168>
	return pvReturn;
 80070a2:	69fb      	ldr	r3, [r7, #28]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3728      	adds	r7, #40	; 0x28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	2000198c 	.word	0x2000198c
 80070b0:	20001998 	.word	0x20001998
 80070b4:	20001990 	.word	0x20001990
 80070b8:	20001984 	.word	0x20001984
 80070bc:	20001994 	.word	0x20001994

080070c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d048      	beq.n	8007164 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070d2:	2308      	movs	r3, #8
 80070d4:	425b      	negs	r3, r3
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4413      	add	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	4b21      	ldr	r3, [pc, #132]	; (800716c <vPortFree+0xac>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4013      	ands	r3, r2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <vPortFree+0x44>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60fb      	str	r3, [r7, #12]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <vPortFree+0x62>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60bb      	str	r3, [r7, #8]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	4b11      	ldr	r3, [pc, #68]	; (800716c <vPortFree+0xac>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4013      	ands	r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d019      	beq.n	8007164 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d115      	bne.n	8007164 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <vPortFree+0xac>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	43db      	mvns	r3, r3
 8007142:	401a      	ands	r2, r3
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007148:	f7fe fcc8 	bl	8005adc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	4b07      	ldr	r3, [pc, #28]	; (8007170 <vPortFree+0xb0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4413      	add	r3, r2
 8007156:	4a06      	ldr	r2, [pc, #24]	; (8007170 <vPortFree+0xb0>)
 8007158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800715a:	6938      	ldr	r0, [r7, #16]
 800715c:	f000 f86c 	bl	8007238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007160:	f7fe fcca 	bl	8005af8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007164:	bf00      	nop
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20001998 	.word	0x20001998
 8007170:	20001990 	.word	0x20001990

08007174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800717a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800717e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007180:	4b27      	ldr	r3, [pc, #156]	; (8007220 <prvHeapInit+0xac>)
 8007182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3307      	adds	r3, #7
 8007192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0307 	bic.w	r3, r3, #7
 800719a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <prvHeapInit+0xac>)
 80071a4:	4413      	add	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071ac:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <prvHeapInit+0xb0>)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <prvHeapInit+0xb0>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	4413      	add	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071c0:	2208      	movs	r2, #8
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <prvHeapInit+0xb4>)
 80071d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071d6:	4b14      	ldr	r3, [pc, #80]	; (8007228 <prvHeapInit+0xb4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2200      	movs	r2, #0
 80071dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <prvHeapInit+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	1ad2      	subs	r2, r2, r3
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <prvHeapInit+0xb4>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4a0a      	ldr	r2, [pc, #40]	; (800722c <prvHeapInit+0xb8>)
 8007202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a09      	ldr	r2, [pc, #36]	; (8007230 <prvHeapInit+0xbc>)
 800720a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800720c:	4b09      	ldr	r3, [pc, #36]	; (8007234 <prvHeapInit+0xc0>)
 800720e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20000d84 	.word	0x20000d84
 8007224:	20001984 	.word	0x20001984
 8007228:	2000198c 	.word	0x2000198c
 800722c:	20001994 	.word	0x20001994
 8007230:	20001990 	.word	0x20001990
 8007234:	20001998 	.word	0x20001998

08007238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007240:	4b28      	ldr	r3, [pc, #160]	; (80072e4 <prvInsertBlockIntoFreeList+0xac>)
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e002      	b.n	800724c <prvInsertBlockIntoFreeList+0x14>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d8f7      	bhi.n	8007246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4413      	add	r3, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d108      	bne.n	800727a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d118      	bne.n	80072c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d00d      	beq.n	80072b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	441a      	add	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	e008      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <prvInsertBlockIntoFreeList+0xb0>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e003      	b.n	80072c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d002      	beq.n	80072d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20001984 	.word	0x20001984
 80072e8:	2000198c 	.word	0x2000198c

080072ec <__errno>:
 80072ec:	4b01      	ldr	r3, [pc, #4]	; (80072f4 <__errno+0x8>)
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000010 	.word	0x20000010

080072f8 <__libc_init_array>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4d0d      	ldr	r5, [pc, #52]	; (8007330 <__libc_init_array+0x38>)
 80072fc:	4c0d      	ldr	r4, [pc, #52]	; (8007334 <__libc_init_array+0x3c>)
 80072fe:	1b64      	subs	r4, r4, r5
 8007300:	10a4      	asrs	r4, r4, #2
 8007302:	2600      	movs	r6, #0
 8007304:	42a6      	cmp	r6, r4
 8007306:	d109      	bne.n	800731c <__libc_init_array+0x24>
 8007308:	4d0b      	ldr	r5, [pc, #44]	; (8007338 <__libc_init_array+0x40>)
 800730a:	4c0c      	ldr	r4, [pc, #48]	; (800733c <__libc_init_array+0x44>)
 800730c:	f000 fc4e 	bl	8007bac <_init>
 8007310:	1b64      	subs	r4, r4, r5
 8007312:	10a4      	asrs	r4, r4, #2
 8007314:	2600      	movs	r6, #0
 8007316:	42a6      	cmp	r6, r4
 8007318:	d105      	bne.n	8007326 <__libc_init_array+0x2e>
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007320:	4798      	blx	r3
 8007322:	3601      	adds	r6, #1
 8007324:	e7ee      	b.n	8007304 <__libc_init_array+0xc>
 8007326:	f855 3b04 	ldr.w	r3, [r5], #4
 800732a:	4798      	blx	r3
 800732c:	3601      	adds	r6, #1
 800732e:	e7f2      	b.n	8007316 <__libc_init_array+0x1e>
 8007330:	08007cf0 	.word	0x08007cf0
 8007334:	08007cf0 	.word	0x08007cf0
 8007338:	08007cf0 	.word	0x08007cf0
 800733c:	08007cf4 	.word	0x08007cf4

08007340 <memcpy>:
 8007340:	440a      	add	r2, r1
 8007342:	4291      	cmp	r1, r2
 8007344:	f100 33ff 	add.w	r3, r0, #4294967295
 8007348:	d100      	bne.n	800734c <memcpy+0xc>
 800734a:	4770      	bx	lr
 800734c:	b510      	push	{r4, lr}
 800734e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007356:	4291      	cmp	r1, r2
 8007358:	d1f9      	bne.n	800734e <memcpy+0xe>
 800735a:	bd10      	pop	{r4, pc}

0800735c <memset>:
 800735c:	4402      	add	r2, r0
 800735e:	4603      	mov	r3, r0
 8007360:	4293      	cmp	r3, r2
 8007362:	d100      	bne.n	8007366 <memset+0xa>
 8007364:	4770      	bx	lr
 8007366:	f803 1b01 	strb.w	r1, [r3], #1
 800736a:	e7f9      	b.n	8007360 <memset+0x4>

0800736c <siprintf>:
 800736c:	b40e      	push	{r1, r2, r3}
 800736e:	b500      	push	{lr}
 8007370:	b09c      	sub	sp, #112	; 0x70
 8007372:	ab1d      	add	r3, sp, #116	; 0x74
 8007374:	9002      	str	r0, [sp, #8]
 8007376:	9006      	str	r0, [sp, #24]
 8007378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800737c:	4809      	ldr	r0, [pc, #36]	; (80073a4 <siprintf+0x38>)
 800737e:	9107      	str	r1, [sp, #28]
 8007380:	9104      	str	r1, [sp, #16]
 8007382:	4909      	ldr	r1, [pc, #36]	; (80073a8 <siprintf+0x3c>)
 8007384:	f853 2b04 	ldr.w	r2, [r3], #4
 8007388:	9105      	str	r1, [sp, #20]
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	a902      	add	r1, sp, #8
 8007390:	f000 f868 	bl	8007464 <_svfiprintf_r>
 8007394:	9b02      	ldr	r3, [sp, #8]
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	b01c      	add	sp, #112	; 0x70
 800739c:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a0:	b003      	add	sp, #12
 80073a2:	4770      	bx	lr
 80073a4:	20000010 	.word	0x20000010
 80073a8:	ffff0208 	.word	0xffff0208

080073ac <__ssputs_r>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	688e      	ldr	r6, [r1, #8]
 80073b2:	429e      	cmp	r6, r3
 80073b4:	4682      	mov	sl, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4690      	mov	r8, r2
 80073ba:	461f      	mov	r7, r3
 80073bc:	d838      	bhi.n	8007430 <__ssputs_r+0x84>
 80073be:	898a      	ldrh	r2, [r1, #12]
 80073c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c4:	d032      	beq.n	800742c <__ssputs_r+0x80>
 80073c6:	6825      	ldr	r5, [r4, #0]
 80073c8:	6909      	ldr	r1, [r1, #16]
 80073ca:	eba5 0901 	sub.w	r9, r5, r1
 80073ce:	6965      	ldr	r5, [r4, #20]
 80073d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d8:	3301      	adds	r3, #1
 80073da:	444b      	add	r3, r9
 80073dc:	106d      	asrs	r5, r5, #1
 80073de:	429d      	cmp	r5, r3
 80073e0:	bf38      	it	cc
 80073e2:	461d      	movcc	r5, r3
 80073e4:	0553      	lsls	r3, r2, #21
 80073e6:	d531      	bpl.n	800744c <__ssputs_r+0xa0>
 80073e8:	4629      	mov	r1, r5
 80073ea:	f000 fb39 	bl	8007a60 <_malloc_r>
 80073ee:	4606      	mov	r6, r0
 80073f0:	b950      	cbnz	r0, 8007408 <__ssputs_r+0x5c>
 80073f2:	230c      	movs	r3, #12
 80073f4:	f8ca 3000 	str.w	r3, [sl]
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007408:	6921      	ldr	r1, [r4, #16]
 800740a:	464a      	mov	r2, r9
 800740c:	f7ff ff98 	bl	8007340 <memcpy>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	6126      	str	r6, [r4, #16]
 800741e:	6165      	str	r5, [r4, #20]
 8007420:	444e      	add	r6, r9
 8007422:	eba5 0509 	sub.w	r5, r5, r9
 8007426:	6026      	str	r6, [r4, #0]
 8007428:	60a5      	str	r5, [r4, #8]
 800742a:	463e      	mov	r6, r7
 800742c:	42be      	cmp	r6, r7
 800742e:	d900      	bls.n	8007432 <__ssputs_r+0x86>
 8007430:	463e      	mov	r6, r7
 8007432:	4632      	mov	r2, r6
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	4641      	mov	r1, r8
 8007438:	f000 faa8 	bl	800798c <memmove>
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	1b9b      	subs	r3, r3, r6
 8007442:	4432      	add	r2, r6
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	2000      	movs	r0, #0
 800744a:	e7db      	b.n	8007404 <__ssputs_r+0x58>
 800744c:	462a      	mov	r2, r5
 800744e:	f000 fb61 	bl	8007b14 <_realloc_r>
 8007452:	4606      	mov	r6, r0
 8007454:	2800      	cmp	r0, #0
 8007456:	d1e1      	bne.n	800741c <__ssputs_r+0x70>
 8007458:	6921      	ldr	r1, [r4, #16]
 800745a:	4650      	mov	r0, sl
 800745c:	f000 fab0 	bl	80079c0 <_free_r>
 8007460:	e7c7      	b.n	80073f2 <__ssputs_r+0x46>
	...

08007464 <_svfiprintf_r>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	4698      	mov	r8, r3
 800746a:	898b      	ldrh	r3, [r1, #12]
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	b09d      	sub	sp, #116	; 0x74
 8007470:	4607      	mov	r7, r0
 8007472:	460d      	mov	r5, r1
 8007474:	4614      	mov	r4, r2
 8007476:	d50e      	bpl.n	8007496 <_svfiprintf_r+0x32>
 8007478:	690b      	ldr	r3, [r1, #16]
 800747a:	b963      	cbnz	r3, 8007496 <_svfiprintf_r+0x32>
 800747c:	2140      	movs	r1, #64	; 0x40
 800747e:	f000 faef 	bl	8007a60 <_malloc_r>
 8007482:	6028      	str	r0, [r5, #0]
 8007484:	6128      	str	r0, [r5, #16]
 8007486:	b920      	cbnz	r0, 8007492 <_svfiprintf_r+0x2e>
 8007488:	230c      	movs	r3, #12
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e0d1      	b.n	8007636 <_svfiprintf_r+0x1d2>
 8007492:	2340      	movs	r3, #64	; 0x40
 8007494:	616b      	str	r3, [r5, #20]
 8007496:	2300      	movs	r3, #0
 8007498:	9309      	str	r3, [sp, #36]	; 0x24
 800749a:	2320      	movs	r3, #32
 800749c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a4:	2330      	movs	r3, #48	; 0x30
 80074a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007650 <_svfiprintf_r+0x1ec>
 80074aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ae:	f04f 0901 	mov.w	r9, #1
 80074b2:	4623      	mov	r3, r4
 80074b4:	469a      	mov	sl, r3
 80074b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ba:	b10a      	cbz	r2, 80074c0 <_svfiprintf_r+0x5c>
 80074bc:	2a25      	cmp	r2, #37	; 0x25
 80074be:	d1f9      	bne.n	80074b4 <_svfiprintf_r+0x50>
 80074c0:	ebba 0b04 	subs.w	fp, sl, r4
 80074c4:	d00b      	beq.n	80074de <_svfiprintf_r+0x7a>
 80074c6:	465b      	mov	r3, fp
 80074c8:	4622      	mov	r2, r4
 80074ca:	4629      	mov	r1, r5
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff ff6d 	bl	80073ac <__ssputs_r>
 80074d2:	3001      	adds	r0, #1
 80074d4:	f000 80aa 	beq.w	800762c <_svfiprintf_r+0x1c8>
 80074d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074da:	445a      	add	r2, fp
 80074dc:	9209      	str	r2, [sp, #36]	; 0x24
 80074de:	f89a 3000 	ldrb.w	r3, [sl]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 80a2 	beq.w	800762c <_svfiprintf_r+0x1c8>
 80074e8:	2300      	movs	r3, #0
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295
 80074ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f2:	f10a 0a01 	add.w	sl, sl, #1
 80074f6:	9304      	str	r3, [sp, #16]
 80074f8:	9307      	str	r3, [sp, #28]
 80074fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007500:	4654      	mov	r4, sl
 8007502:	2205      	movs	r2, #5
 8007504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007508:	4851      	ldr	r0, [pc, #324]	; (8007650 <_svfiprintf_r+0x1ec>)
 800750a:	f7f8 fe69 	bl	80001e0 <memchr>
 800750e:	9a04      	ldr	r2, [sp, #16]
 8007510:	b9d8      	cbnz	r0, 800754a <_svfiprintf_r+0xe6>
 8007512:	06d0      	lsls	r0, r2, #27
 8007514:	bf44      	itt	mi
 8007516:	2320      	movmi	r3, #32
 8007518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751c:	0711      	lsls	r1, r2, #28
 800751e:	bf44      	itt	mi
 8007520:	232b      	movmi	r3, #43	; 0x2b
 8007522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007526:	f89a 3000 	ldrb.w	r3, [sl]
 800752a:	2b2a      	cmp	r3, #42	; 0x2a
 800752c:	d015      	beq.n	800755a <_svfiprintf_r+0xf6>
 800752e:	9a07      	ldr	r2, [sp, #28]
 8007530:	4654      	mov	r4, sl
 8007532:	2000      	movs	r0, #0
 8007534:	f04f 0c0a 	mov.w	ip, #10
 8007538:	4621      	mov	r1, r4
 800753a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753e:	3b30      	subs	r3, #48	; 0x30
 8007540:	2b09      	cmp	r3, #9
 8007542:	d94e      	bls.n	80075e2 <_svfiprintf_r+0x17e>
 8007544:	b1b0      	cbz	r0, 8007574 <_svfiprintf_r+0x110>
 8007546:	9207      	str	r2, [sp, #28]
 8007548:	e014      	b.n	8007574 <_svfiprintf_r+0x110>
 800754a:	eba0 0308 	sub.w	r3, r0, r8
 800754e:	fa09 f303 	lsl.w	r3, r9, r3
 8007552:	4313      	orrs	r3, r2
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	46a2      	mov	sl, r4
 8007558:	e7d2      	b.n	8007500 <_svfiprintf_r+0x9c>
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	1d19      	adds	r1, r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	9103      	str	r1, [sp, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	bfbb      	ittet	lt
 8007566:	425b      	neglt	r3, r3
 8007568:	f042 0202 	orrlt.w	r2, r2, #2
 800756c:	9307      	strge	r3, [sp, #28]
 800756e:	9307      	strlt	r3, [sp, #28]
 8007570:	bfb8      	it	lt
 8007572:	9204      	strlt	r2, [sp, #16]
 8007574:	7823      	ldrb	r3, [r4, #0]
 8007576:	2b2e      	cmp	r3, #46	; 0x2e
 8007578:	d10c      	bne.n	8007594 <_svfiprintf_r+0x130>
 800757a:	7863      	ldrb	r3, [r4, #1]
 800757c:	2b2a      	cmp	r3, #42	; 0x2a
 800757e:	d135      	bne.n	80075ec <_svfiprintf_r+0x188>
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	1d1a      	adds	r2, r3, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	9203      	str	r2, [sp, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	bfb8      	it	lt
 800758c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007590:	3402      	adds	r4, #2
 8007592:	9305      	str	r3, [sp, #20]
 8007594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007660 <_svfiprintf_r+0x1fc>
 8007598:	7821      	ldrb	r1, [r4, #0]
 800759a:	2203      	movs	r2, #3
 800759c:	4650      	mov	r0, sl
 800759e:	f7f8 fe1f 	bl	80001e0 <memchr>
 80075a2:	b140      	cbz	r0, 80075b6 <_svfiprintf_r+0x152>
 80075a4:	2340      	movs	r3, #64	; 0x40
 80075a6:	eba0 000a 	sub.w	r0, r0, sl
 80075aa:	fa03 f000 	lsl.w	r0, r3, r0
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	4303      	orrs	r3, r0
 80075b2:	3401      	adds	r4, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ba:	4826      	ldr	r0, [pc, #152]	; (8007654 <_svfiprintf_r+0x1f0>)
 80075bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075c0:	2206      	movs	r2, #6
 80075c2:	f7f8 fe0d 	bl	80001e0 <memchr>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d038      	beq.n	800763c <_svfiprintf_r+0x1d8>
 80075ca:	4b23      	ldr	r3, [pc, #140]	; (8007658 <_svfiprintf_r+0x1f4>)
 80075cc:	bb1b      	cbnz	r3, 8007616 <_svfiprintf_r+0x1b2>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	3308      	adds	r3, #8
 80075d8:	9303      	str	r3, [sp, #12]
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	4433      	add	r3, r6
 80075de:	9309      	str	r3, [sp, #36]	; 0x24
 80075e0:	e767      	b.n	80074b2 <_svfiprintf_r+0x4e>
 80075e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e6:	460c      	mov	r4, r1
 80075e8:	2001      	movs	r0, #1
 80075ea:	e7a5      	b.n	8007538 <_svfiprintf_r+0xd4>
 80075ec:	2300      	movs	r3, #0
 80075ee:	3401      	adds	r4, #1
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	4619      	mov	r1, r3
 80075f4:	f04f 0c0a 	mov.w	ip, #10
 80075f8:	4620      	mov	r0, r4
 80075fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fe:	3a30      	subs	r2, #48	; 0x30
 8007600:	2a09      	cmp	r2, #9
 8007602:	d903      	bls.n	800760c <_svfiprintf_r+0x1a8>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0c5      	beq.n	8007594 <_svfiprintf_r+0x130>
 8007608:	9105      	str	r1, [sp, #20]
 800760a:	e7c3      	b.n	8007594 <_svfiprintf_r+0x130>
 800760c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007610:	4604      	mov	r4, r0
 8007612:	2301      	movs	r3, #1
 8007614:	e7f0      	b.n	80075f8 <_svfiprintf_r+0x194>
 8007616:	ab03      	add	r3, sp, #12
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	462a      	mov	r2, r5
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <_svfiprintf_r+0x1f8>)
 800761e:	a904      	add	r1, sp, #16
 8007620:	4638      	mov	r0, r7
 8007622:	f3af 8000 	nop.w
 8007626:	1c42      	adds	r2, r0, #1
 8007628:	4606      	mov	r6, r0
 800762a:	d1d6      	bne.n	80075da <_svfiprintf_r+0x176>
 800762c:	89ab      	ldrh	r3, [r5, #12]
 800762e:	065b      	lsls	r3, r3, #25
 8007630:	f53f af2c 	bmi.w	800748c <_svfiprintf_r+0x28>
 8007634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007636:	b01d      	add	sp, #116	; 0x74
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	ab03      	add	r3, sp, #12
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	462a      	mov	r2, r5
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <_svfiprintf_r+0x1f8>)
 8007644:	a904      	add	r1, sp, #16
 8007646:	4638      	mov	r0, r7
 8007648:	f000 f87a 	bl	8007740 <_printf_i>
 800764c:	e7eb      	b.n	8007626 <_svfiprintf_r+0x1c2>
 800764e:	bf00      	nop
 8007650:	08007cbc 	.word	0x08007cbc
 8007654:	08007cc6 	.word	0x08007cc6
 8007658:	00000000 	.word	0x00000000
 800765c:	080073ad 	.word	0x080073ad
 8007660:	08007cc2 	.word	0x08007cc2

08007664 <_printf_common>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	4616      	mov	r6, r2
 800766a:	4699      	mov	r9, r3
 800766c:	688a      	ldr	r2, [r1, #8]
 800766e:	690b      	ldr	r3, [r1, #16]
 8007670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007674:	4293      	cmp	r3, r2
 8007676:	bfb8      	it	lt
 8007678:	4613      	movlt	r3, r2
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007680:	4607      	mov	r7, r0
 8007682:	460c      	mov	r4, r1
 8007684:	b10a      	cbz	r2, 800768a <_printf_common+0x26>
 8007686:	3301      	adds	r3, #1
 8007688:	6033      	str	r3, [r6, #0]
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	0699      	lsls	r1, r3, #26
 800768e:	bf42      	ittt	mi
 8007690:	6833      	ldrmi	r3, [r6, #0]
 8007692:	3302      	addmi	r3, #2
 8007694:	6033      	strmi	r3, [r6, #0]
 8007696:	6825      	ldr	r5, [r4, #0]
 8007698:	f015 0506 	ands.w	r5, r5, #6
 800769c:	d106      	bne.n	80076ac <_printf_common+0x48>
 800769e:	f104 0a19 	add.w	sl, r4, #25
 80076a2:	68e3      	ldr	r3, [r4, #12]
 80076a4:	6832      	ldr	r2, [r6, #0]
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	42ab      	cmp	r3, r5
 80076aa:	dc26      	bgt.n	80076fa <_printf_common+0x96>
 80076ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076b0:	1e13      	subs	r3, r2, #0
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	bf18      	it	ne
 80076b6:	2301      	movne	r3, #1
 80076b8:	0692      	lsls	r2, r2, #26
 80076ba:	d42b      	bmi.n	8007714 <_printf_common+0xb0>
 80076bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076c0:	4649      	mov	r1, r9
 80076c2:	4638      	mov	r0, r7
 80076c4:	47c0      	blx	r8
 80076c6:	3001      	adds	r0, #1
 80076c8:	d01e      	beq.n	8007708 <_printf_common+0xa4>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	68e5      	ldr	r5, [r4, #12]
 80076ce:	6832      	ldr	r2, [r6, #0]
 80076d0:	f003 0306 	and.w	r3, r3, #6
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	bf08      	it	eq
 80076d8:	1aad      	subeq	r5, r5, r2
 80076da:	68a3      	ldr	r3, [r4, #8]
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	bf0c      	ite	eq
 80076e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e4:	2500      	movne	r5, #0
 80076e6:	4293      	cmp	r3, r2
 80076e8:	bfc4      	itt	gt
 80076ea:	1a9b      	subgt	r3, r3, r2
 80076ec:	18ed      	addgt	r5, r5, r3
 80076ee:	2600      	movs	r6, #0
 80076f0:	341a      	adds	r4, #26
 80076f2:	42b5      	cmp	r5, r6
 80076f4:	d11a      	bne.n	800772c <_printf_common+0xc8>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e008      	b.n	800770c <_printf_common+0xa8>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4652      	mov	r2, sl
 80076fe:	4649      	mov	r1, r9
 8007700:	4638      	mov	r0, r7
 8007702:	47c0      	blx	r8
 8007704:	3001      	adds	r0, #1
 8007706:	d103      	bne.n	8007710 <_printf_common+0xac>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	3501      	adds	r5, #1
 8007712:	e7c6      	b.n	80076a2 <_printf_common+0x3e>
 8007714:	18e1      	adds	r1, r4, r3
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	2030      	movs	r0, #48	; 0x30
 800771a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800771e:	4422      	add	r2, r4
 8007720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007728:	3302      	adds	r3, #2
 800772a:	e7c7      	b.n	80076bc <_printf_common+0x58>
 800772c:	2301      	movs	r3, #1
 800772e:	4622      	mov	r2, r4
 8007730:	4649      	mov	r1, r9
 8007732:	4638      	mov	r0, r7
 8007734:	47c0      	blx	r8
 8007736:	3001      	adds	r0, #1
 8007738:	d0e6      	beq.n	8007708 <_printf_common+0xa4>
 800773a:	3601      	adds	r6, #1
 800773c:	e7d9      	b.n	80076f2 <_printf_common+0x8e>
	...

08007740 <_printf_i>:
 8007740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	460c      	mov	r4, r1
 8007746:	4691      	mov	r9, r2
 8007748:	7e27      	ldrb	r7, [r4, #24]
 800774a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800774c:	2f78      	cmp	r7, #120	; 0x78
 800774e:	4680      	mov	r8, r0
 8007750:	469a      	mov	sl, r3
 8007752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007756:	d807      	bhi.n	8007768 <_printf_i+0x28>
 8007758:	2f62      	cmp	r7, #98	; 0x62
 800775a:	d80a      	bhi.n	8007772 <_printf_i+0x32>
 800775c:	2f00      	cmp	r7, #0
 800775e:	f000 80d8 	beq.w	8007912 <_printf_i+0x1d2>
 8007762:	2f58      	cmp	r7, #88	; 0x58
 8007764:	f000 80a3 	beq.w	80078ae <_printf_i+0x16e>
 8007768:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800776c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007770:	e03a      	b.n	80077e8 <_printf_i+0xa8>
 8007772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007776:	2b15      	cmp	r3, #21
 8007778:	d8f6      	bhi.n	8007768 <_printf_i+0x28>
 800777a:	a001      	add	r0, pc, #4	; (adr r0, 8007780 <_printf_i+0x40>)
 800777c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077ed 	.word	0x080077ed
 8007788:	08007769 	.word	0x08007769
 800778c:	08007769 	.word	0x08007769
 8007790:	08007769 	.word	0x08007769
 8007794:	08007769 	.word	0x08007769
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007769 	.word	0x08007769
 80077a0:	08007769 	.word	0x08007769
 80077a4:	08007769 	.word	0x08007769
 80077a8:	08007769 	.word	0x08007769
 80077ac:	080078f9 	.word	0x080078f9
 80077b0:	0800781d 	.word	0x0800781d
 80077b4:	080078db 	.word	0x080078db
 80077b8:	08007769 	.word	0x08007769
 80077bc:	08007769 	.word	0x08007769
 80077c0:	0800791b 	.word	0x0800791b
 80077c4:	08007769 	.word	0x08007769
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	08007769 	.word	0x08007769
 80077d0:	08007769 	.word	0x08007769
 80077d4:	080078e3 	.word	0x080078e3
 80077d8:	680b      	ldr	r3, [r1, #0]
 80077da:	1d1a      	adds	r2, r3, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	600a      	str	r2, [r1, #0]
 80077e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0a3      	b.n	8007934 <_printf_i+0x1f4>
 80077ec:	6825      	ldr	r5, [r4, #0]
 80077ee:	6808      	ldr	r0, [r1, #0]
 80077f0:	062e      	lsls	r6, r5, #24
 80077f2:	f100 0304 	add.w	r3, r0, #4
 80077f6:	d50a      	bpl.n	800780e <_printf_i+0xce>
 80077f8:	6805      	ldr	r5, [r0, #0]
 80077fa:	600b      	str	r3, [r1, #0]
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	da03      	bge.n	8007808 <_printf_i+0xc8>
 8007800:	232d      	movs	r3, #45	; 0x2d
 8007802:	426d      	negs	r5, r5
 8007804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007808:	485e      	ldr	r0, [pc, #376]	; (8007984 <_printf_i+0x244>)
 800780a:	230a      	movs	r3, #10
 800780c:	e019      	b.n	8007842 <_printf_i+0x102>
 800780e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007812:	6805      	ldr	r5, [r0, #0]
 8007814:	600b      	str	r3, [r1, #0]
 8007816:	bf18      	it	ne
 8007818:	b22d      	sxthne	r5, r5
 800781a:	e7ef      	b.n	80077fc <_printf_i+0xbc>
 800781c:	680b      	ldr	r3, [r1, #0]
 800781e:	6825      	ldr	r5, [r4, #0]
 8007820:	1d18      	adds	r0, r3, #4
 8007822:	6008      	str	r0, [r1, #0]
 8007824:	0628      	lsls	r0, r5, #24
 8007826:	d501      	bpl.n	800782c <_printf_i+0xec>
 8007828:	681d      	ldr	r5, [r3, #0]
 800782a:	e002      	b.n	8007832 <_printf_i+0xf2>
 800782c:	0669      	lsls	r1, r5, #25
 800782e:	d5fb      	bpl.n	8007828 <_printf_i+0xe8>
 8007830:	881d      	ldrh	r5, [r3, #0]
 8007832:	4854      	ldr	r0, [pc, #336]	; (8007984 <_printf_i+0x244>)
 8007834:	2f6f      	cmp	r7, #111	; 0x6f
 8007836:	bf0c      	ite	eq
 8007838:	2308      	moveq	r3, #8
 800783a:	230a      	movne	r3, #10
 800783c:	2100      	movs	r1, #0
 800783e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007842:	6866      	ldr	r6, [r4, #4]
 8007844:	60a6      	str	r6, [r4, #8]
 8007846:	2e00      	cmp	r6, #0
 8007848:	bfa2      	ittt	ge
 800784a:	6821      	ldrge	r1, [r4, #0]
 800784c:	f021 0104 	bicge.w	r1, r1, #4
 8007850:	6021      	strge	r1, [r4, #0]
 8007852:	b90d      	cbnz	r5, 8007858 <_printf_i+0x118>
 8007854:	2e00      	cmp	r6, #0
 8007856:	d04d      	beq.n	80078f4 <_printf_i+0x1b4>
 8007858:	4616      	mov	r6, r2
 800785a:	fbb5 f1f3 	udiv	r1, r5, r3
 800785e:	fb03 5711 	mls	r7, r3, r1, r5
 8007862:	5dc7      	ldrb	r7, [r0, r7]
 8007864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007868:	462f      	mov	r7, r5
 800786a:	42bb      	cmp	r3, r7
 800786c:	460d      	mov	r5, r1
 800786e:	d9f4      	bls.n	800785a <_printf_i+0x11a>
 8007870:	2b08      	cmp	r3, #8
 8007872:	d10b      	bne.n	800788c <_printf_i+0x14c>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	07df      	lsls	r7, r3, #31
 8007878:	d508      	bpl.n	800788c <_printf_i+0x14c>
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	6861      	ldr	r1, [r4, #4]
 800787e:	4299      	cmp	r1, r3
 8007880:	bfde      	ittt	le
 8007882:	2330      	movle	r3, #48	; 0x30
 8007884:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007888:	f106 36ff 	addle.w	r6, r6, #4294967295
 800788c:	1b92      	subs	r2, r2, r6
 800788e:	6122      	str	r2, [r4, #16]
 8007890:	f8cd a000 	str.w	sl, [sp]
 8007894:	464b      	mov	r3, r9
 8007896:	aa03      	add	r2, sp, #12
 8007898:	4621      	mov	r1, r4
 800789a:	4640      	mov	r0, r8
 800789c:	f7ff fee2 	bl	8007664 <_printf_common>
 80078a0:	3001      	adds	r0, #1
 80078a2:	d14c      	bne.n	800793e <_printf_i+0x1fe>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	b004      	add	sp, #16
 80078aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ae:	4835      	ldr	r0, [pc, #212]	; (8007984 <_printf_i+0x244>)
 80078b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	680e      	ldr	r6, [r1, #0]
 80078b8:	061f      	lsls	r7, r3, #24
 80078ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80078be:	600e      	str	r6, [r1, #0]
 80078c0:	d514      	bpl.n	80078ec <_printf_i+0x1ac>
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	bf44      	itt	mi
 80078c6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ca:	6023      	strmi	r3, [r4, #0]
 80078cc:	b91d      	cbnz	r5, 80078d6 <_printf_i+0x196>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	f023 0320 	bic.w	r3, r3, #32
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	2310      	movs	r3, #16
 80078d8:	e7b0      	b.n	800783c <_printf_i+0xfc>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	f043 0320 	orr.w	r3, r3, #32
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	2378      	movs	r3, #120	; 0x78
 80078e4:	4828      	ldr	r0, [pc, #160]	; (8007988 <_printf_i+0x248>)
 80078e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078ea:	e7e3      	b.n	80078b4 <_printf_i+0x174>
 80078ec:	065e      	lsls	r6, r3, #25
 80078ee:	bf48      	it	mi
 80078f0:	b2ad      	uxthmi	r5, r5
 80078f2:	e7e6      	b.n	80078c2 <_printf_i+0x182>
 80078f4:	4616      	mov	r6, r2
 80078f6:	e7bb      	b.n	8007870 <_printf_i+0x130>
 80078f8:	680b      	ldr	r3, [r1, #0]
 80078fa:	6826      	ldr	r6, [r4, #0]
 80078fc:	6960      	ldr	r0, [r4, #20]
 80078fe:	1d1d      	adds	r5, r3, #4
 8007900:	600d      	str	r5, [r1, #0]
 8007902:	0635      	lsls	r5, r6, #24
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	d501      	bpl.n	800790c <_printf_i+0x1cc>
 8007908:	6018      	str	r0, [r3, #0]
 800790a:	e002      	b.n	8007912 <_printf_i+0x1d2>
 800790c:	0671      	lsls	r1, r6, #25
 800790e:	d5fb      	bpl.n	8007908 <_printf_i+0x1c8>
 8007910:	8018      	strh	r0, [r3, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	4616      	mov	r6, r2
 8007918:	e7ba      	b.n	8007890 <_printf_i+0x150>
 800791a:	680b      	ldr	r3, [r1, #0]
 800791c:	1d1a      	adds	r2, r3, #4
 800791e:	600a      	str	r2, [r1, #0]
 8007920:	681e      	ldr	r6, [r3, #0]
 8007922:	6862      	ldr	r2, [r4, #4]
 8007924:	2100      	movs	r1, #0
 8007926:	4630      	mov	r0, r6
 8007928:	f7f8 fc5a 	bl	80001e0 <memchr>
 800792c:	b108      	cbz	r0, 8007932 <_printf_i+0x1f2>
 800792e:	1b80      	subs	r0, r0, r6
 8007930:	6060      	str	r0, [r4, #4]
 8007932:	6863      	ldr	r3, [r4, #4]
 8007934:	6123      	str	r3, [r4, #16]
 8007936:	2300      	movs	r3, #0
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793c:	e7a8      	b.n	8007890 <_printf_i+0x150>
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	4632      	mov	r2, r6
 8007942:	4649      	mov	r1, r9
 8007944:	4640      	mov	r0, r8
 8007946:	47d0      	blx	sl
 8007948:	3001      	adds	r0, #1
 800794a:	d0ab      	beq.n	80078a4 <_printf_i+0x164>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	079b      	lsls	r3, r3, #30
 8007950:	d413      	bmi.n	800797a <_printf_i+0x23a>
 8007952:	68e0      	ldr	r0, [r4, #12]
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	4298      	cmp	r0, r3
 8007958:	bfb8      	it	lt
 800795a:	4618      	movlt	r0, r3
 800795c:	e7a4      	b.n	80078a8 <_printf_i+0x168>
 800795e:	2301      	movs	r3, #1
 8007960:	4632      	mov	r2, r6
 8007962:	4649      	mov	r1, r9
 8007964:	4640      	mov	r0, r8
 8007966:	47d0      	blx	sl
 8007968:	3001      	adds	r0, #1
 800796a:	d09b      	beq.n	80078a4 <_printf_i+0x164>
 800796c:	3501      	adds	r5, #1
 800796e:	68e3      	ldr	r3, [r4, #12]
 8007970:	9903      	ldr	r1, [sp, #12]
 8007972:	1a5b      	subs	r3, r3, r1
 8007974:	42ab      	cmp	r3, r5
 8007976:	dcf2      	bgt.n	800795e <_printf_i+0x21e>
 8007978:	e7eb      	b.n	8007952 <_printf_i+0x212>
 800797a:	2500      	movs	r5, #0
 800797c:	f104 0619 	add.w	r6, r4, #25
 8007980:	e7f5      	b.n	800796e <_printf_i+0x22e>
 8007982:	bf00      	nop
 8007984:	08007ccd 	.word	0x08007ccd
 8007988:	08007cde 	.word	0x08007cde

0800798c <memmove>:
 800798c:	4288      	cmp	r0, r1
 800798e:	b510      	push	{r4, lr}
 8007990:	eb01 0402 	add.w	r4, r1, r2
 8007994:	d902      	bls.n	800799c <memmove+0x10>
 8007996:	4284      	cmp	r4, r0
 8007998:	4623      	mov	r3, r4
 800799a:	d807      	bhi.n	80079ac <memmove+0x20>
 800799c:	1e43      	subs	r3, r0, #1
 800799e:	42a1      	cmp	r1, r4
 80079a0:	d008      	beq.n	80079b4 <memmove+0x28>
 80079a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079aa:	e7f8      	b.n	800799e <memmove+0x12>
 80079ac:	4402      	add	r2, r0
 80079ae:	4601      	mov	r1, r0
 80079b0:	428a      	cmp	r2, r1
 80079b2:	d100      	bne.n	80079b6 <memmove+0x2a>
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079be:	e7f7      	b.n	80079b0 <memmove+0x24>

080079c0 <_free_r>:
 80079c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079c2:	2900      	cmp	r1, #0
 80079c4:	d048      	beq.n	8007a58 <_free_r+0x98>
 80079c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ca:	9001      	str	r0, [sp, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f1a1 0404 	sub.w	r4, r1, #4
 80079d2:	bfb8      	it	lt
 80079d4:	18e4      	addlt	r4, r4, r3
 80079d6:	f000 f8d3 	bl	8007b80 <__malloc_lock>
 80079da:	4a20      	ldr	r2, [pc, #128]	; (8007a5c <_free_r+0x9c>)
 80079dc:	9801      	ldr	r0, [sp, #4]
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	4615      	mov	r5, r2
 80079e2:	b933      	cbnz	r3, 80079f2 <_free_r+0x32>
 80079e4:	6063      	str	r3, [r4, #4]
 80079e6:	6014      	str	r4, [r2, #0]
 80079e8:	b003      	add	sp, #12
 80079ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ee:	f000 b8cd 	b.w	8007b8c <__malloc_unlock>
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	d90b      	bls.n	8007a0e <_free_r+0x4e>
 80079f6:	6821      	ldr	r1, [r4, #0]
 80079f8:	1862      	adds	r2, r4, r1
 80079fa:	4293      	cmp	r3, r2
 80079fc:	bf04      	itt	eq
 80079fe:	681a      	ldreq	r2, [r3, #0]
 8007a00:	685b      	ldreq	r3, [r3, #4]
 8007a02:	6063      	str	r3, [r4, #4]
 8007a04:	bf04      	itt	eq
 8007a06:	1852      	addeq	r2, r2, r1
 8007a08:	6022      	streq	r2, [r4, #0]
 8007a0a:	602c      	str	r4, [r5, #0]
 8007a0c:	e7ec      	b.n	80079e8 <_free_r+0x28>
 8007a0e:	461a      	mov	r2, r3
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b10b      	cbz	r3, 8007a18 <_free_r+0x58>
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	d9fa      	bls.n	8007a0e <_free_r+0x4e>
 8007a18:	6811      	ldr	r1, [r2, #0]
 8007a1a:	1855      	adds	r5, r2, r1
 8007a1c:	42a5      	cmp	r5, r4
 8007a1e:	d10b      	bne.n	8007a38 <_free_r+0x78>
 8007a20:	6824      	ldr	r4, [r4, #0]
 8007a22:	4421      	add	r1, r4
 8007a24:	1854      	adds	r4, r2, r1
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	6011      	str	r1, [r2, #0]
 8007a2a:	d1dd      	bne.n	80079e8 <_free_r+0x28>
 8007a2c:	681c      	ldr	r4, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	6053      	str	r3, [r2, #4]
 8007a32:	4421      	add	r1, r4
 8007a34:	6011      	str	r1, [r2, #0]
 8007a36:	e7d7      	b.n	80079e8 <_free_r+0x28>
 8007a38:	d902      	bls.n	8007a40 <_free_r+0x80>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	6003      	str	r3, [r0, #0]
 8007a3e:	e7d3      	b.n	80079e8 <_free_r+0x28>
 8007a40:	6825      	ldr	r5, [r4, #0]
 8007a42:	1961      	adds	r1, r4, r5
 8007a44:	428b      	cmp	r3, r1
 8007a46:	bf04      	itt	eq
 8007a48:	6819      	ldreq	r1, [r3, #0]
 8007a4a:	685b      	ldreq	r3, [r3, #4]
 8007a4c:	6063      	str	r3, [r4, #4]
 8007a4e:	bf04      	itt	eq
 8007a50:	1949      	addeq	r1, r1, r5
 8007a52:	6021      	streq	r1, [r4, #0]
 8007a54:	6054      	str	r4, [r2, #4]
 8007a56:	e7c7      	b.n	80079e8 <_free_r+0x28>
 8007a58:	b003      	add	sp, #12
 8007a5a:	bd30      	pop	{r4, r5, pc}
 8007a5c:	2000199c 	.word	0x2000199c

08007a60 <_malloc_r>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	1ccd      	adds	r5, r1, #3
 8007a64:	f025 0503 	bic.w	r5, r5, #3
 8007a68:	3508      	adds	r5, #8
 8007a6a:	2d0c      	cmp	r5, #12
 8007a6c:	bf38      	it	cc
 8007a6e:	250c      	movcc	r5, #12
 8007a70:	2d00      	cmp	r5, #0
 8007a72:	4606      	mov	r6, r0
 8007a74:	db01      	blt.n	8007a7a <_malloc_r+0x1a>
 8007a76:	42a9      	cmp	r1, r5
 8007a78:	d903      	bls.n	8007a82 <_malloc_r+0x22>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	2000      	movs	r0, #0
 8007a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a82:	f000 f87d 	bl	8007b80 <__malloc_lock>
 8007a86:	4921      	ldr	r1, [pc, #132]	; (8007b0c <_malloc_r+0xac>)
 8007a88:	680a      	ldr	r2, [r1, #0]
 8007a8a:	4614      	mov	r4, r2
 8007a8c:	b99c      	cbnz	r4, 8007ab6 <_malloc_r+0x56>
 8007a8e:	4f20      	ldr	r7, [pc, #128]	; (8007b10 <_malloc_r+0xb0>)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	b923      	cbnz	r3, 8007a9e <_malloc_r+0x3e>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4630      	mov	r0, r6
 8007a98:	f000 f862 	bl	8007b60 <_sbrk_r>
 8007a9c:	6038      	str	r0, [r7, #0]
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 f85d 	bl	8007b60 <_sbrk_r>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d123      	bne.n	8007af2 <_malloc_r+0x92>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	6033      	str	r3, [r6, #0]
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f000 f86c 	bl	8007b8c <__malloc_unlock>
 8007ab4:	e7e3      	b.n	8007a7e <_malloc_r+0x1e>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	1b5b      	subs	r3, r3, r5
 8007aba:	d417      	bmi.n	8007aec <_malloc_r+0x8c>
 8007abc:	2b0b      	cmp	r3, #11
 8007abe:	d903      	bls.n	8007ac8 <_malloc_r+0x68>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	441c      	add	r4, r3
 8007ac4:	6025      	str	r5, [r4, #0]
 8007ac6:	e004      	b.n	8007ad2 <_malloc_r+0x72>
 8007ac8:	6863      	ldr	r3, [r4, #4]
 8007aca:	42a2      	cmp	r2, r4
 8007acc:	bf0c      	ite	eq
 8007ace:	600b      	streq	r3, [r1, #0]
 8007ad0:	6053      	strne	r3, [r2, #4]
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f000 f85a 	bl	8007b8c <__malloc_unlock>
 8007ad8:	f104 000b 	add.w	r0, r4, #11
 8007adc:	1d23      	adds	r3, r4, #4
 8007ade:	f020 0007 	bic.w	r0, r0, #7
 8007ae2:	1ac2      	subs	r2, r0, r3
 8007ae4:	d0cc      	beq.n	8007a80 <_malloc_r+0x20>
 8007ae6:	1a1b      	subs	r3, r3, r0
 8007ae8:	50a3      	str	r3, [r4, r2]
 8007aea:	e7c9      	b.n	8007a80 <_malloc_r+0x20>
 8007aec:	4622      	mov	r2, r4
 8007aee:	6864      	ldr	r4, [r4, #4]
 8007af0:	e7cc      	b.n	8007a8c <_malloc_r+0x2c>
 8007af2:	1cc4      	adds	r4, r0, #3
 8007af4:	f024 0403 	bic.w	r4, r4, #3
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d0e3      	beq.n	8007ac4 <_malloc_r+0x64>
 8007afc:	1a21      	subs	r1, r4, r0
 8007afe:	4630      	mov	r0, r6
 8007b00:	f000 f82e 	bl	8007b60 <_sbrk_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d1dd      	bne.n	8007ac4 <_malloc_r+0x64>
 8007b08:	e7cf      	b.n	8007aaa <_malloc_r+0x4a>
 8007b0a:	bf00      	nop
 8007b0c:	2000199c 	.word	0x2000199c
 8007b10:	200019a0 	.word	0x200019a0

08007b14 <_realloc_r>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	4607      	mov	r7, r0
 8007b18:	4614      	mov	r4, r2
 8007b1a:	460e      	mov	r6, r1
 8007b1c:	b921      	cbnz	r1, 8007b28 <_realloc_r+0x14>
 8007b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b22:	4611      	mov	r1, r2
 8007b24:	f7ff bf9c 	b.w	8007a60 <_malloc_r>
 8007b28:	b922      	cbnz	r2, 8007b34 <_realloc_r+0x20>
 8007b2a:	f7ff ff49 	bl	80079c0 <_free_r>
 8007b2e:	4625      	mov	r5, r4
 8007b30:	4628      	mov	r0, r5
 8007b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b34:	f000 f830 	bl	8007b98 <_malloc_usable_size_r>
 8007b38:	42a0      	cmp	r0, r4
 8007b3a:	d20f      	bcs.n	8007b5c <_realloc_r+0x48>
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f7ff ff8e 	bl	8007a60 <_malloc_r>
 8007b44:	4605      	mov	r5, r0
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d0f2      	beq.n	8007b30 <_realloc_r+0x1c>
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	f7ff fbf7 	bl	8007340 <memcpy>
 8007b52:	4631      	mov	r1, r6
 8007b54:	4638      	mov	r0, r7
 8007b56:	f7ff ff33 	bl	80079c0 <_free_r>
 8007b5a:	e7e9      	b.n	8007b30 <_realloc_r+0x1c>
 8007b5c:	4635      	mov	r5, r6
 8007b5e:	e7e7      	b.n	8007b30 <_realloc_r+0x1c>

08007b60 <_sbrk_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d06      	ldr	r5, [pc, #24]	; (8007b7c <_sbrk_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7f8 fef0 	bl	8000950 <_sbrk>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_sbrk_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_sbrk_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20001b68 	.word	0x20001b68

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_lock+0x8>)
 8007b82:	f000 b811 	b.w	8007ba8 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	20001b70 	.word	0x20001b70

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f000 b80c 	b.w	8007baa <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	20001b70 	.word	0x20001b70

08007b98 <_malloc_usable_size_r>:
 8007b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9c:	1f18      	subs	r0, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfbc      	itt	lt
 8007ba2:	580b      	ldrlt	r3, [r1, r0]
 8007ba4:	18c0      	addlt	r0, r0, r3
 8007ba6:	4770      	bx	lr

08007ba8 <__retarget_lock_acquire_recursive>:
 8007ba8:	4770      	bx	lr

08007baa <__retarget_lock_release_recursive>:
 8007baa:	4770      	bx	lr

08007bac <_init>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr

08007bb8 <_fini>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr
